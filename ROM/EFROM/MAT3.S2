	NAME	MATHS
 
*FLOATING POINT PACKAGE
* ARITHMETIC AND MATHS PACKAGE FOR SINC
* P 1025-2-1
* C.C.B. JUL 1978 (MOD FEB 1979)
*(MOD FEB 1980 - AGT)
*AND AGAIN AGT JUNE 79
*BGS OCT 79
* BGS/MJAC OCT 82 - mods to INP and SQRT extend into MAT3A
 
*MEMORY USAGE
 
	PSECT ABS
FACC	EQU 0100H	;RAM area
BEG	EQU 0F45BH	;ROM area
 
*INTERNAL ROUTINES
 
	GLOBAL  NORM
	GLOBAL FSTO
	GLOBAL  STO
	GLOBAL  STOZ
	GLOBAL  SWIN
	GLOBAL	ADD
	GLOBAL	SUB
	GLOBAL	MULT
	GLOBAL	DIV
	GLOBAL	RAISE
	GLOBAL	LDF
	GLOBAL	STF
	GLOBAL	FLT
	GLOBAL	PI
	GLOBAL	RND
	GLOBAL	NEG
	GLOBAL	ABS
	GLOBAL	ATAN
	GLOBAL	COS
	GLOBAL	EXP
	GLOBAL	INT
	GLOBAL	LOG
	GLOBAL	SIGN
	GLOBAL	SIN
	GLOBAL  SQRT
	GLOBAL	SQRT2
	GLOBAL  SHLREG
	GLOBAL	TAN
	GLOBAL	ASIN
	GLOBAL	ACOS
	GLOBAL	COMP
	GLOBAL	FIX
	GLOBAL	RUND	;ROUND RTN FOR UNSTSS
	GLOBAL INP
	GLOBAL INP1
	GLOBAL  INP100
	GLOBAL  INP1B
	GLOBAL  INPTR
	GLOBAL	OUT
	GLOBAL OR
	GLOBAL AND
	GLOBAL NOT
	GLOBAL FPONE
	GLOBAL FPZERO
	GLOBAL FPMONE
	GLOBAL FLPTHF
	GLOBAL FPID2
	GLOBAL NUMGE
	GLOBAL NUMNE
	GLOBAL NUMGT
	GLOBAL NUMLT
	GLOBAL NUMEQ
	GLOBAL NUMLE
	GLOBAL RELBOO
	GLOBAL STPOS
	GLOBAL NOP
	GLOBAL PEEK
	GLOBAL RANDOM
	GLOBAL INITRAND
	GLOBAL MATHS
 
 
*INTERNAL ADDRESSES
 
	GLOBAL FACC
	GLOBAL RANDNO
	GLOBAL CPID2
 
 
 
*EXTERNALS
 
 
	GLOBAL PHPOS
	GLOBAL CALLHL
	GLOBAL CLOCK
	GLOBAL AR0TAB
	GLOBAL AR1TAB
	GLOBAL AR2TAB
	GLOBAL RST8	;BGS
	GLOBAL TTCAPS	;AGT
 
*RAM USAGE
 
FH	EQU FACC
T1	EQU FACC+7
T2	EQU T1+7
T5	EQU T2+7		;MUST GO HERE !!
W1	EQU T5+6
W2	EQU W1+1
W3	EQU W2+1
W4	EQU W3+1
W5	EQU W4+1
M1:	EQU	W3		;USED IN MATHS
M2:	EQU	M1+6
M3:	EQU	M2+6
M4:	EQU	M3+6
T4	EQU	M2
RANDNO:	EQU M4+8
CODE	EQU RANDNO-2	;AGT
INPTR	EQU CODE	;BGS
BITCNT	EQU FACC+7	;MJAC
ARGPTR	EQU BITCNT+1	;MJAC
EXPSTO	EQU ARGPTR+1	;MJAC
YREG	EQU EXPSTO+1	;MJAC
XREG	EQU YREG+6	;MJAC
 
*OTHER EQUATES (AGT)
 
RST	EQU 08H
TAB	EQU	09AH
 
	EJECT
	ORG	BEG
 
 
RANDOM:	LD HL,CLOCK
	JR RAND1
 
INITRAND:
	LD HL,RNDTAB
RAND1:	LD DE,RANDNO
	LD BC,4
	LDIR
	OR A
	RET
 
RNDTAB:	DEFB 0EDH,0EDH,0EDH,0EDH
 
MATHS:	BIT 7,A
	JR NZ MATH1
	BIT 6,A
	JR NZ MATH2
	LD BC,-6
	ADD HL,BC
	PUSH HL
	LD BC,AR0TAB
	JR MATH22
 
MATH1:	LD BC,AR1TAB
	RES 7,A
	JR MATH21
 
MATH2:	LD D,H
	LD E,L
	LD BC,6
	ADD HL,BC
	LD BC,AR2TAB
	RES 6,A
MATH21:	PUSH HL
	PUSH DE
	CALL LDF
	POP DE
MATH22:	LD H,0
	LD L,A
	ADD HL,BC
	LD A,(HL)
	INC HL
	LD H,(HL)
	LD L,A
	CALL CALLHL
	POP HL
	LD A,2
	CALL NC STF
	RET
 
	EJECT
;-----
;
; FLOATING POINT COMPARE
;
; (D,E)-(H,L) FLAGS SET AS IF 'CMP'
;
;-----
COMP:	ORG $
	INC	HL		;(H,L)=0 ?
	LD	A,(HL)
	DEC	HL
	OR	A
	INC	DE
	LD	A,(DE)
	DEC	DE
	JR	Z,CM1		;YES
	OR	A		;NO - (D,E)=0 ?
	JR	NZ,COMP1	;NO
	XOR	A		;AS (D,E)=0
CM2:	BIT	0,(HL)
	RET	NZ
	INC	A
	CCF
	RET
CM1:	OR	A		;AS(H,L)=0
	RET	Z		;AS BOTH=0
	EX	DE,HL
	XOR	A
	SCF
	JR	CM2
COMP1:	BIT	0,(HL)		;SAME SIGN ?
	EX	DE,HL
	JR	Z,CM3
	XOR	A
	BIT	0,(HL)
	JR	NZ,CM4
	INC	A
	RET
CM3:	SCF
	BIT	0,(HL)
	RET	NZ		;NO
	EX	DE,HL
CM4:	LD	A,(HL)		;YES - CHK MAGN OF EXP
	ADD A 80H
	LD B A
	LD A (DE)
	ADD A 80H
	CP B
	RET NZ
CMAN	LD B 05H
CMANT:	INC	HL		;CHECK MANT
	INC	DE
	LD	A,(DE)
	CP	(HL)
	RET	NZ		;AS NEQ
	DJNZ	CMANT
	RET			;AS EQ
	EJECT
;------
;LOGIC
;------
OR	LD L 0B3H
	JR LOGIC
NOT	LD DE CE0
	LD L 2FH
	JR LOGIC
AND	LD L 0A3H
LOGIC	LD H 0C9H
	LD (CODE) HL
	PUSH DE
	CALL CFIX
	POP HL
	RET C
	PUSH DE
	CALL LDF
	CALL CFIX
	POP HL
	RET C
	LD A L
	CALL CODE
	LD B A
	LD A H
	LD E D
	CALL CODE
	LD E B
	LD D A
	CALL NEGD
	CALL FLT
	LD DE T5
	JP SUB
;
CFIX	LD HL CHALF
	CALL PUSHF
	LD E T5-FH
	LD A 04H
	LD (DE) A
	CALL ADD
	CALL FIX
NEGD	RL D
	CCF
	RR D
	RET
	EJECT
;
;------
;
; CHECK IF (H,L) IS INTEGER < 256 (Z SET IF YES, ANS IN E)
;
;------
CKINT:	LD	D,(HL)		;D=EXP
	INC	HL
	LD	E,(HL)		;E=MANT (WD 1)
	LD	A,E
	OR	A
	RET	Z		;YES - =0
	LD	A,D
	SRA	A
	DEC	A
	RET	NZ		;NO - FRAC  POWER
	LD	B,4
CKI:	INC	HL
	OR	(HL)
	DJNZ	CKI
	RET
;
;----
;
; SHIFT FACC RT 1 PLACE
;
;----
SHRF1:	LD	B 06H
SHRF11:	INC	L
	LD	C (HL)
	LD	(HL) A
	LD	A C
	DJNZ	SHRF11
	RET
;
;-----
;
; ADD T1 TO FACC
;
;-----
FLADD:	LD	E T1+6-FACC
FLA2:	LD	L FACC+6-FACC
	LD	B,6
FLA3:	XOR	A		;UNSET CRY
FLA1:	LD	A,(DE)		;(H,L)=(H,L)+(D,E)
	ADC	A,(HL)
	LD	(HL),A
	DEC	L
	DEC	E
	DJNZ	FLA1		;DO NXT
	RET
	EJECT
;----
;
; SUB T1 FROM FACC
;
;----
FLSUB	LD	L T1+6-FACC
	LD	E FACC+6-FACC
	LD	B,6
	XOR	A		;UNSET CRY
FLS1:	LD	A,(DE)		;(D,E)=(D,E)-(H,L)
	SBC	A,(HL)
	LD	(DE),A
	DEC	L
	DEC	E
	DJNZ	FLS1
	RET
;
;-----
;
; LOAD T1 FROM (D,E)
;
;-----
LOAD:	LD	HL,T1-1		;LAST WD OF FACC=0
	LD	(HL),0
	INC	HL
	PUSH	HL
	EX	DE,HL
	CALL	PP1
	XOR	A
	LD	(DE),A
	POP	HL
	RET
;-----
;
; OFLO OR NORMAL EXIT (MUST JUMP)
;
;-----
TROV1	POP AF
TROV2	POP AF
OFLO:	SCF
	JR	EXIT
PI:	LD	HL,FCPI		;LOAD PI TO FACC
FSTO:	CALL	LDF
NOP:	EQU $
STO:	XOR	A
EXIT:	LD	HL FACC
	LD	DE T5
	RET
;------
;FLOATING POINT 1,1/2.
;------
;
FPONE	LD HL CE0
	JR FSTO
;
FLPTHF	LD HL CHALF
	JR FSTO
	EJECT
;-----
;
; NORMALISE (MUST JUMP)
;
;----
NORM	XOR	A
	LD	L 01H
	OR	(HL)
	JR	Z NEXIT
	LD	L 06H
	CALL	PROWND
	JP	Z AS0
	JR	STO
NEXIT	LD	E L
	LD	D H
	LD	BC 0606H
NORM1	OR	(HL)
	LDI
	JR NZ	NORM2
	DEC	DE
	INC	BC
NORM2	DJNZ	NORM1
	JR	Z STOZ
	DEC	L
	LD	B C
	CALL	CLFR1
	LD	L A
	SUB	C
	SUB	C
	ADD	A (HL)
	JP	PO STONZ
FPZERO	ORG	$
STOZ	CALL	CLRFC
STONZ	LD	(HL) A
	JR	STO
;-----
;ROUND
;-----
PROWND	LD	A (HL)
	RLA
	RET	NC
ROWND	DEC	L
	RET	Z
	INC	(HL)
	JR	Z ROWND
	RET
	EJECT
; Numeric comparison operators
 
NUMGT:	LD B,1
	DEFB 3AH	;op-code for LD a,(nn)
NUMGE:	LD B,5		;i.e. skip
	DEFB 3AH
NUMLT:	LD B,2
	DEFB 3AH
NUMLE:	LD B,6
	DEFB 3AH
NUMNE:	LD B,3
	DEFB 3AH
NUMEQ:	LD B,4
NUMCMP:		; "MATHPAK" srtn to compare 2 opds & 
		;   return Boolean value as result
		; enter with d0 of B set if GT should
		;   yield TRUE, d1 if LT, d2 if EQ
	LD HL,FACC
	PUSH BC
	EX DE,HL
	CALL COMP
	POP BC
RELBOO:		; convert relation in F to Boolean
	LD A,4
	JR Z,LNC3	; if EQ, A=4
	ADC A,-3	; A := 1 if GT, 2 if LT
LNC3:	AND B
	JR Z,FPZERO	;yield FALSE if NOT OK
			;yield TRUE if OK
;FLOATING POINT -1.
;------
FPMONE	CALL FPONE
;----
; NEGATE
;----
NEG:	LD	HL,FACC
	LD	A,(HL)
	XOR	1
	LD	(HL),A
	RET
;-----
;
; LOAD AND STORE FACC
;
;-----
LDF:	PUSH	BC
	PUSH	HL		;SAVE H,L,B,C
	LD	DE,FACC
LDF1:	CALL	PP1
	POP	HL
	POP	BC
	RET
STF4:	LD	HL,T4
STF:	PUSH	BC
	PUSH	HL
	EX	DE,HL
	LD	HL,FACC
	JR	LDF1
;-----
;
; LOAD AND STO (H,L)
;
;-----
PUSHF:	LD	DE,T5
PP1:	LD	BC,6
	LDIR
	RET
;----
;
; GET CHAR - TEST FOR NUMERIC
;
;----
SWIN:	PUSH HL
	LD HL,(INPTR)
SPCLP:	LD A,(HL)
	INC HL
	CP ' '
	JR Z SPCLP
	LD (INPTR),HL
	POP  HL
	CALL TTCAPS
	CP '0'
	RET C
	CP '9'+1
	CCF
	RET C
	SUB '0'
	RET
 
;
;-----
;
; DOUBLE FACC - ASSUMES OFLO NOT POSSIBLE
;
;----
DFACC:	LD	HL,FACC+5	;SHFT MANT LFT 1
	CALL	SQSH5
	CALL	C,FLTCRY	;AS MANT OFLO
	RET
	EJECT
;------
;
; ADD AND SUBTRACT
;
;-----
;
;----
;
; PI/2-FACC OR 1-FACC
;
;----
SBSR1:	LD	DE,CPID2
	JR	SBSR
SBSR2:	LD	DE,CE0
SBSR:	LD	HL,FACC		;FACC=-FACC
	LD	A,(HL)
	XOR	1
	LD	(HL),A
; SHOULD BE  JR ADD **
;
;
ADD:	CALL	LOAD
	JR	ASB
SUB:	CALL	LOAD
	LD	A,(HL)		;INVERT SIGN BIT
	XOR	1
	LD	(HL),A
;
; CHECK IF INTEGER ADD
;
ASB:	ORG	$
	LD	A,(FACC+1)
	OR	A
	JP	Z,FSTO
	CALL	CKINT		;(D,E)=INTEGER ?
	JR	NZ,ASA	;NO - NORMAL ADD
	BIT	0,D		;(D,E)=-VE ?
	JR	NZ,ASA	;YES - NORMAL ADD
	LD	A,(FACC)	;EXP IS 1-5 ?
	SRA	A
	JR C ASA
	DEC	A
	CP	5
	JR	NC,ASA	;NO - NORMAL ADD
				;INTEGER ADD TO MANTISSA
	INC	A
	LD	L,A
	XOR	A
ND3:	LD	A,E
	LD	E,0
	ADC	A,(HL)
	LD	(HL),A
	JR	NC,ASTO	;EXIT AS NOT CRY
	DEC	L
	JR	NZ ND3
	CALL	FLTCRY		;AS TOP WD OFLO
	JR	ASTO
	EJECT
; NORMAL ADD
;
ASA:	LD	L T1+1-FACC	;T1=0 ?
	LD	DE FACC
	LD	A,(HL)
	OR	A
	JP	Z,STO		;YES - EXIT
	DEC	HL		;SUB EXP
	LD	A,(HL)
	SRA	A
	LD	B,A
	LD	A,(DE)
	SRA	A		;MAKE EXP BINARY
	SUB	B		;KEEP FACC SIGN BIT
	EX	DE,HL
	JR	Z,AS2		;=0
	JP	P,AS1
	NEG			;AS -VE
	PUSH	AF
	CALL	EXT1F		;EXCHANGE T1 AND FACC
	POP	AF
AS1:	CP	6		;EXP DIF > 5 ?
	JR	NC ASTO	;YES - JUST STO FACC
	LD	D,A
	LD	A,6		;NO SH RT
	SUB	D
	LD	C,A
	LD	B,0
	LD	L T1-FACC	;FROM
	ADD	HL,BC
	PUSH	DE
	LD	DE T1+6		;TO
	LDDR			;MOVE
	POP	BC
	XOR	A
AS4:	LD	(DE),A		;INSERT LD ZEROS
	DEC	DE
	DJNZ	AS4
AS2:	LD	A,(DE)		;ADD OR SUB ?
	LD	L FACC-FACC
	XOR	(HL)
	RRA
	JR	C,AS5		;SUB
	CALL	FLADD		;ADD
	JR	NC,ANORM	;NO
AS0	CALL	FLTCRY		;AS CRY SET
	JP	PE,OFLO		;AS OFLO
ASTO:	JR	ANORM		;EXIT
	EJECT
AS5:	CALL	FLSUB		;SUB
	JR	NC,ANORM
	EX	DE,HL
	LD	A,(HL)		;AS ANS NOW -VE
	XOR	1		;INV SIGN BIT
	LD	(HL),A
	INC	HL
	LD	B,6		;ONES COMP MANT
AS6:	LD	A,(HL)
	CPL
	LD	(HL),A
	INC	HL
	DJNZ	AS6
AS7:	CALL	ROWND		;NOW ADD 1
ANORM:	JP	NORM		;CRY MUST UNSET SOMETIME
;
;-----
;
; AS TOP WD OF MANT OFLO'D
;
;-----
FLTCRY:	LD	A 01H
	CALL	SHRF1
	LD	L B
INCX:	LD	A,(HL)		;INC EXP
	ADD	A,2
	LD	(HL),A
	RET
;
;----
;
; EXCHANGE FACC WITH (D,E)
;
;----
EXT1F:	ORG	$
	LD	B,7
EXG1:	LD	C,(HL)
	LD	A,(DE)
	LD	(HL),A
	LD	A,C
	LD	(DE),A
	INC	DE
	INC	HL
	DJNZ	EXG1
	RET
	EJECT
;------
;
; MULTIPLY
;
;------
MULT	LD HL FACC	;
EXPO	LD A (DE)	;
	LD B A		;
	AND 01H		;
	XOR (HL)	;
	RES 0 B		;
	ADD A B		;
	LD (HL) A	;
	JP PO TOMM	;
TOV:	JP M OFLO	;
ASTOZ:	JP STOZ		;
TOMM	LD C 0AH	;
	CALL MMULT	;
	INC L		;
	OR (HL)		;
	JR NZ JNORM	;
	LD L 07H	;
	CALL PROWND	;
JNORM	JP NORM		;
MMULT	LD L TAB-4	;
	INC DE		;
	EX DE HL	;
	LDI		;
	LDI		;
	LDI		;
	LDI		;
	LDI		;
	LD H D		;
LDFA	LD L C		;
	LD E TAB-6	;
	LDD		;
	LDD		;
	LDD		;
	LDD		;
	LDD		;
	XOR A		;
	LD (DE) A	;
	DEC E		;
	LD L TAB-6	;
	LD B H		;
TABLE	LD A C		;
	ADD A 05H	;
	LD C A		;
	LD A (BC)	;
	ADD A (HL)	;
	LD (DE) A	;
	DEC C		;
	DEC L		;
	DEC E		;
	LD A (BC)	;
	ADC A (HL)	;
	LD (DE) A	;
	EJECT
	DEC C		;
	DEC L		;
	DEC E		;
	LD A (BC)	;
	ADC A (HL)	;
	LD (DE) A	;
	DEC C		;
	DEC L		;
	DEC E		;
	LD A (BC)	;
	ADC A (HL)	;
	LD (DE) A	;
	DEC C		;
	DEC L		;
	DEC E		;
	LD A (BC)	;
	ADC A (HL)	;
	LD (DE) A	;
	DEC C		;
	DEC L		;
	DEC E		;
	LD A 00H	;
	ADC A (HL)	;
	LD (DE) A	;
	DEC L		;
	DEC E		;
	LD A TAB-60H	;
	SUB E		;
	JR NZ TABLE	;
			;
	LD L 0AH	;
	LD B L		;
DCLEAR	LD (HL) A	;
	DEC L		;
	DJNZ DCLEAR	;
	CALL MADD	;
	EJECT
	LD L 0AH	;
	LD B L		;
DSHIFT	RLD		;
	DEC L		;
	DJNZ DSHIFT	;
			;
MADD	LD BC 500H+TAB+1;
	XOR A		;
MADD1	DEC C		;
	LD L C		;
	RLD		;
	JR Z MADD3	;
	LD E A		;
	ADD A A		;
	ADD A E		;
	ADD A A		;
	SUB TAB		;
	NEG		;
	LD E A		;
	LD A C		;
	SUB 90H		;
	LD L A		;
	LD A (DE)	;
	ADD A (HL)	;
	LD (HL) A	;
	DEC E		;
	DEC L		;
	LD A (DE)	;
	ADC A (HL)	;
	LD (HL) A	;
	DEC E		;
	DEC L		;
	LD A (DE)	;
	ADC A (HL)	;
	LD (HL) A	;
	DEC E		;
	DEC L		;
	LD A (DE)	;
	ADC A (HL)	;
	LD (HL) A	;
	DEC E		;
	DEC L		;
	LD A (DE)	;
	ADC A (HL)	;
	LD (HL) A	;
	DEC E		;
	DEC L		;
	LD A (DE)	;
MADD2	ADC A (HL)	;
	LD (HL) A	;
	LD A 00H	;
	DEC L		;
	JR C MADD2	;
MADD3	DJNZ MADD1	;
	SUB A		;
	RET		;
	EJECT
;------
; CLR MANT OF FACC
;------
CLRFC:	LD	HL,FACC+6
CLFR2:	LD	B,6
CLFR1:	XOR	A
CLFR:	LD	(HL),A
	DEC	HL
	DJNZ	CLFR
	RET
CL20:	LD	B,20		;CLR 20 WDS FROM FACC
	LD	HL,FACC+19
	JR	CLFR1
;------
; SHIFT FACC RT 1 BIT
;------
SHB:	LD	B,6
	XOR	A
SHFB1:	RR	(HL)
	INC	HL
	DJNZ	SHFB1
	RET
;----
; DIVIDE (L=1) OR MULTIPLY (L=0)
;----
MORD:	PUSH	HL		;SAVE H,L B,C A,F
	PUSH	BC
	BIT	0,L
	JR	Z,MD1
	CALL	DIV		;DIV
	JR	MD2
MD1:	CALL	MULT		;MULT
MD2:	POP	BC
	POP	HL
	RET
;-----
; 1 BIT SHIFT OF (H,L)
;------
SQSH6:	XOR	A		;6 BYTES
	RL	(HL)
	DEC	L
	JR	SQSH5A
SQSH5:	XOR	A		;5 BYTES
SQSH5A:	RL	(HL)
	DEC	L
SQSH5B:	RL	(HL)		;4 BYTES
	DEC	L
	RL	(HL)
	DEC	L
	RL	(HL)
	DEC	L
	RL	(HL)
	DEC	L
	RET
	EJECT
;
;----
;
; CALC RECIPROCAL
;
;----
RECIP:	CALL	STF4		;ST IN T4
	PUSH	HL
	LD	HL,CE0
	CALL	LDF
	POP	DE
;
;-----
;
; DIVIDE
;
;-----
DIV:	CALL	LOAD		;LOAD T1
	LD	L FACC+1-FH
	LD	E T1+1-FACC
	LD	A,(DE)
	OR	A
	JP	Z,OFLO		;YES - ERR
	LD	A,(HL)
	OR	A
	JP	Z,STOZ		;AS FACC=0
	DEC	HL
	DEC	DE
	LD	A,(DE)		;SET EXPNT AND SIGN
	LD	B,A
	AND	1
	XOR	(HL)
	RES	0,B
	SUB	B
	JP	PE,TOV		;AS OFLO
	ADD	A,2
	JP	PE,TOV		;AS OFLO
	PUSH AF
	LD	L T2+6-FACC	;CLR T2
	CALL CLFR2
	LD L B
	LD (HL) 0FH
	INC L
	CALL	SHB
	INC	L
	CALL	SHB
	LD	C,1		;C=1
D5:	LD	L T1+1-FH	;BIT 6 OF T1+1
	BIT	6,(HL)
	JR	NZ,D4		;SET
	LD	L T1+6-FACC	;UNSET SH LFT 1
	CALL	SQSH6
	RLC	C		;SH C LFT
	JR	D5
	EJECT
D4	LD L A
D6	LD E L
	INC L
	LD A 0C0H
	AND (HL)
	JR Z D8
	LD L 07H
	LD B 06H
	CALL CMANT
	JR C D8
	CALL FLSUB
	EX DE HL
	LD L (HL)
	LD A (HL)
	ADD A C
	LD (HL) A
D8	LD L 06H
	CALL SQSH6
	RRC C
	ADC A (HL)
	LD (HL) A
	CP 15H
	JR NZ D6
	POP AF
	LD (HL) A
	LD E 01H
	LD L 0FH
	CALL PP1
	JP NORM
	EJECT
;-----
;
; INPUT
;
;-----
; INPUT
;-----
INP:	LD HL,SWIN
	LD (RST8),HL
	LD (INPTR),DE
	SCF
	LD A,199	;error:"illegal INPTR value"
	INC D
	RET Z
	JP INP1
 
;
;-----
; INP100  -  INP is in 'MAT3A' and calls INP100
;
;-----
  DS 0F8AFH-$			;ADD ZEROES UNTIL 0F8AFH
	ORG	0F8AFH
INP100:	CALL	CLRFC		;CLR FACC
	LD	(HL),A		;(AND EXP)
	LD	HL,W4
	LD	(HL),A
	LD	BC,0		;B=C=0
	RST	RST
	JR	NC,IN4
	CP	55Q		;- ?
	JR	NZ,IN2
	INC	(HL)		;YES
	JR	NXT
IN2:	CP	53Q		;+ ?
	JR	NZ,IN3
NXT:	RST	RST
	JR	NC,IN4		;=DIGIT
IN3:	CP	56Q		;. ?
	JR	Z,IN5		;=.
	BIT	0 B		;NONE - DIGIT YET ?
	SCF
	RET	Z		;NO DIGIT - ERROR
	CP 105Q
	JR Z IN6		;=E
INP1B	LD	A,C		;YES - NEG C
	NEG
	LD	L,A
	JP	SEXP
IN4:	ORG	$
	LD	DE,CE1		;*10
	PUSH	BC
	PUSH	AF
	CALL	MULT
INERR	JP C TROV1
	POP	AF
	LD	HL,CE0+5	;T=1
	LD	DE,T2+5
	LD	BC,6
	LDDR
	INC	DE
	INC	DE
	LD	(DE),A
	LD	DE,T2
	CALL	ADD		;+T2
	JP C TROV2
	POP	BC
	SET	0 B		;HAD DIGIT
	BIT	1 B		;? HAD DP
	JR	Z NXT		;NO
	INC	C		;YES
	JR	NXT
	EJECT
IN5:	BIT	1 B		;? HAD DP
	SCF
	RET	NZ		;YES - ERROR
	SET	1 B
	JR	NXT
IN6:	LD	B,0		;E - DEAL WITH EXP
	RST	RST
	JR	NC,INE1	;=DIG
	CP	53Q
	JR	Z,NXTE	;AS +
	CP 81H
	JR Z NXTE		;AS TOKEN +
	CP	55Q		;- ?
	JR Z PNXTE
	CP 82H			;TOKEN -
COFLO:	SCF			;NONE
	RET	NZ
PNXTE	LD	B,1		;AS -
NXTE:	RST	RST
	RET	C
INE1:	OR	A
	JR	NZ,INE1A
INE1B:	RST	RST
	JR	C,EXI		;AS DONE
	OR	A
	JR	Z,INE1B	;AS LD ZERO
INE1A:	LD	L,A
	RST	RST
	JR	C,INE2
	LD	H,A		;H=NEW CHAR
	LD	A,L
	RLCA			;OLD CHAR * 10
	RLCA
	RLCA
	ADD	A,L
	ADD	A,L
	ADD	A,H		;+ NEW CHAR
	LD	L,A
	RST	RST
BOFLO:	CCF			;AS ANOTHER CHAR
	RET	C
INE2:	LD	A,L
	BIT	0,B
	JR	Z,INE3
	NEG
INE3:	SUB	C		;C=DP CNT
	JP	PE,TOV		;AS OFLO
	EJECT
SEXP:	OR	A		;EXP=+VE OR -VE ?
	LD	L,0
	JP	P,SEXP3		;+VE
	NEG			;-VE
	INC	L
SEXP3:	LD	DE,CE20		;>20 ?
	SUB	20
	JP	P,DACT		;AS >20
	LD	E CE4-CON
	ADD	A,16
	JP	P,DACT		;AS >4
	LD	E CE1-CON
	ADD	A,3
	JP	M,EXI		;AS=0
DACT:	PUSH	AF
	CALL	MORD		;* OR /
	JP C TROV2
	POP	AF
	JR	SEXP3
EXI:	LD	A,(W4)		;SET SIGN
	LD	HL,FACC
	OR	(HL)
	LD	(HL),A
	RET
	EJECT
;------
;
;OUTPUT
;
;------
FREE0	XOR A		;
	PUSH DE		;
	JR FREE00	;
OUT	LD A (FACC+1)	;
	OR A		;
	PUSH BC		;
FREE00	PUSH AF		;
	CALL OZTRY	;
	BIT 0 (HL)	;
	LD E 0BH	;
	LD A 20H	;
	JR Z OUT11	;
	ADD A 0DH	;
OUT11	LD (DE) A	;
	XOR A 		;
	LD B 28H	;
OUT12	INC E		;
	LD (DE) A	;
	DJNZ OUT12	;
	POP AF		;
	PUSH AF		;
	LD C L		;
	JR Z OUT20	;
	RES 0 (HL)	;
OUT18	LD A (HL)	;
	OR A		;
	JP P OUT14	;
	NEG		;
	SCF		;
OUT14	PUSH AF		;
	LD DE CEM20	;
	LD B 14H	;
	CP 12H		;
	JR NC OUT15	;
	LD E CEM4-CON	;
	LD B, 04H		;
	CP 08H		;
	JR NC OUT15	;
	LD E CEM1-CON	;
	LD B 01H		;
	CP 02H		;
	JR NC OUT15	;
	POP AF		;
	PUSH HL		;
	PUSH DE		;
	PUSH BC		;
	CALL COMP	;
	POP BC		;
	POP DE		;
	POP HL		;
	JR C OUT20	;
	JR OUT16	;
OUT15	POP AF		;
	LD A B		;
	JR NC OUT17	;
OUT16	LD A E		;
	ADD A 12H	;
	LD E A		;
	LD A B		;
	NEG		;
OUT17	ADD A C		;
	LD C A		;
	CP 108		;
	JR C OUT19	;
	CP 154		;
	JR C OUT22	;
OUT19	ORG $		;
	PUSH BC		;
	CALL MULT	;
	POP BC		;
	JR OUT18	;
OUT20	LD B 1FH	;
	LD A 0AH	;
OUT21	LD DE CE1	;
	PUSH BC		;
	LD C A		;
	CALL MMULT	;
	POP BC		;
	INC L		;
	LD A (HL)	;
	LD L B		;
	ADD A 30H	;make ascii
	LD (HL) A	;
	INC B		;
	INC B		;
	POP AF		;
	POP DE		;
	PUSH DE		;
	PUSH AF		;
	LD A E		;
	ADD A A		;
	ADD A 20H	;
	CP B		;
	LD A 0BH	;
	JR NC OUT21	;
OUT22	POP AF		;
	POP DE		;
	JR NZ OUT23	;
	OR D		;
	RL A		;
	JR Z OUT23	;
	INC C		;
OUT23	LD A D		;
	RLA		;
	JR C FXPE	;
	RLA		;
	JP C FREE	;
			;
			;
			;
			;
			;
FXP	ORG $		;
	CALL FXPCAL	;
	CALL ROUNDA	;
	CALL NC FXPCAL	;
FXPF	LD A C		;
	ADD A A		;
	ADD A 1EH	;
	LD L A		;
	LD (HL) 2EH	;
	PUSH HL		;
	LD A E		;
	SUB D		;
	ADD A C		;
	DEC C		;
	ADD A A		;
	JP Z PFXPW	;
	ADD A 1EH	;
	LD L A		;
	LD (HL) H	;
	POP HL		;
	INC C		;
	LD B C		;
	JP P LOOTA	;
	DEC L		;
	LD B D		;
	LD A D		;
	OR A		;
	LD A 20H	;
	CALL NZ ORIN	;
	LD A C		;
	NEG		;
	LD B A		;
	LD A 30H	;
	JR LOOTB	;
			;
			;
			;
FXPEW	LD B 05H	;
FXPW	LD A E		;
	CP D		;
	JR NZ OOT1	;
	DEC B		;
OOT1	ADD A B		;
	LD B A		;
	BIT 7 C		;
	LD A 2EH	;
	JR NZ OOT3	;
	LD A 2AH	;
OOT3	LD L 0CH	;
OOT4	LD (HL) A	;
	INC L		;
	DJNZ OOT4	;
	LD (HL) H	;
TOLOOT	JR LOOT	;
			;
			;
FXPE	RES 7 D		;
	CALL OCAL	;
	CALL ROUND	;
	CALL NC OCAL	;
FXPEF	LD A C		;
	SUB B		;
	LD C A		;
	LD A B		;
	ADD A A		;
	ADD A 1EH	;
	LD L A		;
	LD (HL) 2EH	;
	LD A E		;
	SUB D		;
	ADD A B		;
	ADD A A		;
	ADD A 1EH	;
	LD L A		;
	LD (HL) 45H	;
	INC L		;
	LD (HL) 2BH	;
	LD A C		;
	BIT 7 A		;
	JR Z OUT43	;
	NEG		;
	LD (HL) 2DH	;
OUT43	INC L		;
	CP 100		;
	JR NC FXPEW	;
	LD (HL) 30H	;
OUT45	SUB 10		;
	JR C OUT46	;
	INC (HL)	;
	JR OUT45	;
OUT46	ADD A 3AH	;
	INC L		;
	LD (HL) A	;
	INC L		;
	LD (HL) H	;
LOOTA	LD A D		;
	SUB B		;
	LD B A		;
	LD A 20H	;
LOOTB	LD L 1DH	;
	CALL NZ ORIN	;
LOOT	LD L 0BH	;
	PUSH HL		;can JP UNIOUT here to
	LD E L		;1K maths pack.
	LD D H		;
NREM1	INC L		;
NREM2	INC E		;
	LD A (DE)	;
	OR A		;
	JR Z NREM2	;
	LD (HL) A	;
	CP H		;
	JR NZ NREM1	;
	LD (HL) 20H	;
	INC L		;
	LD A L		;
	POP HL		;
	SUB L		;
	LD C A		;
	RET		;
			;
FXPCAL	LD A D		;
	SUB C		;
	LD L A		;
	LD A E		;
	SUB L		;
	LD B 1		;
	RET NC		;
PFXPW	POP AF		;
	JP FXPW		;
			;
ORIN	LD (HL) A	;
	DEC L		;
	DJNZ ORIN	;
	RET		;
			;
FREE	LD A E		;
	CALL ROUNDA	;
	LD A C		;
	OR A		;
	JP P FREEP	;
	CP -98		;
	JP C FREE0	;
	CP -4		;
	JR C FREEE	;
	LD D 0		;
FREEF	LD A E		;
	SUB C		;
	LD B A		;
	CALL NZ ZEREM	;
	LD A B		;
	ADD A D		;
	LD E A		;
	JP FXPF		;
FREEP	LD A E		;
	CP C		;
	LD D C		;
	JR NC FREEF	;
FREEE	LD D 1		;
	LD B E		;
	DEC B		;
	CALL ZEREM	;
	INC B		;
	LD E B		;
	LD B D		;
	JP FXPEF	;
			;
			;
			;
			;
			;
			;
ZEREM	DEC L		;
	DEC L		;
	LD A (HL)	;
	CP 30H		;
	RET NZ		;
	DJNZ ZEREM	;
	RET		;
			;
OCAL	ORG $		;
	LD L C		;
	XOR A		;
	LD B D		;
	CP D		;
	RET Z		;
	DEC L		;
	LD A B		;
	JP P OCAL1	;
	NEG		;
OCAL1	LD B A		;
	LD A L		;
	ADD A B		;
OCAL2	SUB B		;
	CP D		;
	JR NC OCAL2	;
	INC A		;
	LD B A		;
	RET		;
			;
			;
			;
ROUND	ORG $		;
	LD A E		;
	SUB D		;
	ADD A B		;
ROUNDA	PUSH HL		;
	ADD A A		;
	ADD A 1FH	;
	LD L A		;
	LD A (HL)	;
	CP 35H		;
	JR OUT38	;
OUT35	DEC L		;
	DEC L		;
	LD A (HL)	;
	CP 39H		;
OUT38	JR C OUT36	;
	LD (HL) 30H	;
	LD A 1FH	;
	CP L		;
	JR NZ OUT35	;
	INC C		;
OUT36	INC (HL)	;
	POP HL		;
	RET		;
			;
			;
			;
			;
	EJECT
;------
;
; INTEGER PART
;
;------
INT:	LD	HL,FACC
	LD	A,(HL)
	SRA	A
	LD	B,A
	JP	P,INT3
	CALL	CLRFC		;AS < 1
	JR	INT4
INT3:	LD	A,5		;CLR FRAC
	SUB	B
	LD	C,A
	XOR	A
	LD	L FACC+5-FACC
INT1:	DEC	C
	JP	M,INT2
	OR (HL)		;fix submitted by correspondent
	LD	(HL),0
	DEC	HL
	JR	INT1
INT2:	OR	A
	JR	Z,ASTO1	;AS INT ALRDY
INT4:	LD	DE,CE0
	LD	L FACC-FACC	;-VE ?
	LD	A,(HL)
	RRCA
	JP	C,SUB		;YES - SUB 1
ASTO1:	JP	STO
;
;------
;
; ABS
;
;------
ABS:	LD	HL,FACC
	XOR	A
	RES	0,(HL)
	RET
	EJECT
;
;-----
;
; SIGN
;
;-----
SIGN:	LD	HL,FACC+1
	LD	A,(HL)
	OR	A
	JR	Z,ASTO1
	DEC	HL
	LD	A,(HL)
	AND	1
	PUSH	AF
	PUSH	HL
	LD	HL,CE0		;FACC=1
	CALL	LDF
	POP	HL
	POP	AF
	OR	(HL)
	LD	(HL),A
	JR	ASTO1
;
;-----
;
; FIX D,E SET TO FIX (H,L) - CRY SET IF ERR
;
;-----
FIX:	LD	A,(HL)
	LD	DE,0
	SRA	A
	RET	C		;EXIT AS -VE
	RET	M		;<1 SO ZERO
	RET	Z		;ALSO <1
	CP	3
	CCF
	RET	C		;AS EXP >2
FIX1:	INC	HL
	LD	E,(HL)
	DEC	A
	RET	Z		;AS EXP=1
	LD	D,E
	JR	FIX1		;AS EXP=2
	EJECT
*------
* RUND - ROUND (HL) TO DE -LIKE FIX
*-----
RUND:	CALL FIX
	JR C RUND1
	RET M
	INC HL
	BIT 7,(HL)
	RET Z
	INC DE
	LD A,D
	OR E
	RET NZ
	SCF
	RET
 
RUND1	OR A
	RET M
	SCF
	RET NZ
	INC HL
	LD A (HL)
	RLA
	RET
 
PEEK:	EQU $
;REPLACE FPA WITH VALUE OF LOC(FPA)
	LD HL,FACC
	CALL FIX	;STORE ADDR. TO DE
	RET C		;R.IF FIX ERR (I.E 65535<ADDR.<0)
	LD A,(DE)
	JR LP1
 
STPOS:	EQU	$
;LOAD PRINT-HEAD POSN. INTO FP ACCUMULATOR
	LD A,(PHPOS)
LP1:	LD E,A
	LD D,0
;
;------
;
; FLOAT
;
;------
FLT:	CALL	CLRFC		;H,L SET TO FLT(D,E)
	LD	(HL),4
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),E
	JP	NORM
	EJECT
;============================
; MATHEMATICS SECTION
;============================
POLY	PUSH HL		;
	CALL STOZ
POLY1 	LD L M3+5-FH
	CALL CLFR2
	LD E M3-FH	;
	POP HL		;
	LD A (HL)	;
	SRA A		;
	SRA A		;
	SRA A		;
	LD (DE) A	;
	INC E		;
	LD A (HL)	;
	AND 07H		;
	RET Z		;
	LD C A		;
	INC L		;
	LDIR		;
	PUSH HL		;
	LD E M4-FH
	CALL MULT
	LD E M3-FH
	CALL ADD
	JR POLY1	;
			;
			;
			;
TSPSH	LD E 6		;
	LD (DE) A	;
	LD D A		;
	LD A (HL)	;
	LD E A		;
	SRA A		;
	RET Z		;
	RET M		;
	CP 4		;
	JP NC TROV1	;
SPSH	LD B A		;
SPSH1	INC L		;
	LD D (HL)	;
	LD (HL) 0	;
	DJNZ SPSH1	;
	PUSH DE		;
	CALL NORM	;
	POP DE		;
	LD A -8		;
	ADD A E		;
	CP (HL)		;
	RET NZ		;
	INC L		;
	LD A (HL)	;
	CP 4		;
	RET NC		;
	LD (HL) 0	;
	RET		;
	EJECT
;------
;SIN AND COS
;------
COS	SCF		;
	JR SIN1	;
SIN	XOR A		;
SIN1	LD HL FACC
	LD C 1		;
	LD A (HL)	;
	JR C SIN2	;
	AND C		;
	ADD A A		;
	LD C A		;
SIN2	RES 0 (HL)	;
	PUSH BC		;
	LD DE C2DPI
	CALL MULT
	CALL TSPSH	;
	POP BC		;
	LD A D		;
	ADD A C		;
	AND 3		;
	RRC A		;
	PUSH AF		;
	LD DE CE0
	CALL C SUB
	POP AF		;
	CALL PO NEG
	LD DE TB3342	;
			;falls through to POLY
PREP	LD L M1-FH
	PUSH DE		;
	CALL STF
	LD DE FACC
	CALL MULT
	LD L M4-FH
	CALL STF
	POP HL		;
	CALL POLY	;
	LD E M1-FH
	JP MULT
	EJECT
;------
;EXP
;------
EXP	LD HL FACC
	LD A (HL)	;
	RES 0 (HL)	;
	SRA A		;
	PUSH AF		;
	JP M EXP1	;
	CP 2		;
	JR C EXP1	;
	POP AF		;
	CCF		;
	RET C		;
	JP STOZ
EXP1	LD DE C1DLN2	;
	CALL MULT
	CALL TSPSH	;
	PUSH DE		;
	LD L M4-FH
	CALL STF
	LD HL TB1044	;
	CALL POLY	;
	LD HL FACC
	POP DE		;
	SRA E		;
	JP M EXP4	;
	JR Z EXP4	;
	LD A D		;
	AND 07H		;
	LD B A		;
	JR Z EXP3	;
EXP2	PUSH BC
	CALL DFACC
	POP BC
	DJNZ EXP2	;
EXP3	LD A D		;
	SRA E		;
	SRA E		;
	RRA		;
	SRL A		;
	RES 0 A		;
	ADD A (HL)	;
	LD (HL) A	;
EXP4	POP AF		;
	JP C RECIP
	XOR A		;
	RET		;
	EJECT
;------
; SQRT1
;------
SQRT1:	JP SQRT
		;and JP back to SQRT2
SQRT2	LD (HL),E	;so exponent = 0
	LD L,EXPSTO
	BIT 0,A
	JR Z EXPEVEN
	INC A
	DEC E
EXPEVEN	LD (HL),A
	DEC L		;point at ARGPTR
	LD (HL),E
	DEC L
	LD (HL),49	;initialise bit counter
	LD C,H		;initial value for Y-register
	LD B,47		;loop counter
SQLOOP		;First shift Xregister left two bits,
		;putting next bit from FACC into LSbit
	PUSH BC
	LD B,2
SQSHLP	OR A		;clear CY in case JR OVER taken
	LD L,BITCNT	;;so HL ==> bit count
	LD A,(HL)
	DEC A
	JR Z OVER	;if all bits of FACC used up
	LD (HL),A	;replace updated bit count
	AND 7
	INC HL		;so HL ==> ARGPTR
	JR NZ NOTNEXT
	INC (HL)	;move onto next byte of FACC
NOTNEXT	LD L,(HL)	;so HL = pointer to byte of FACC
	RL (HL)		;get next bit to CY
OVER	LD L,XREG+5
	CALL SHLREG	;shift left register
	DJNZ SQSHLP	;do it again
		;Now shift Yreg left one place and adjust
		;lower three bits
	LD L,YREG+5
	CALL SHLREG
	LD L,YREG+5
	LD A,(HL)
	AND 0F8H
	OR C
	LD (HL),A
COMPARISON
	LD L,XREG
	LD E,YREG
	LD BC,6*256+1
CPLOOP	LD A,(DE)
	CP (HL)
	INC HL		;preserve Z flag
	INC DE		;and CY
	JR C GTE
	JR NZ LESS
	DJNZ CPLOOP
GTE	LD C,5		;desired value in lower three bits
			;is 101
		;subtract
	LD L,YREG+5
	LD E,XREG+5
	LD B,6
	OR A
SBLP	LD A,(DE)
	SBC A,(HL)
	LD (DE),A
	DEC E
	DEC L
	DJNZ SBLP
LESS	POP AF
	LD B,A
	DJNZ SQLOOP
		;Finally copy answer into FACC and
		;normalise
	LD L,EXPSTO
	LD E,FACC
	LD BC,7
	LDIR
	JP NORM
	NOP		;spare byte
 
	EJECT
	ORG 0FD4DH
;
;------
;ARCTAN
;------
ATAN	LD HL FACC+1
	LD A (HL)	;
	OR A		;
	JP Z STOZ
	DEC L		;
	LD A (HL)	;
	RES 0 (HL)	;
	BIT 0 A		;
	PUSH AF		;
	SUB 2		;
	CP 7EH		;
	PUSH AF		;
	CALL C RECIP
	LD DE TB4995	;
	CALL PREP	;
	POP AF		;
	CALL C SBSR1
	POP AF		;
	CALL NZ NEG
	JP STO
;------
;LOG
;------
LOG	LD HL FACC+1	;
	LD A (HL)	;
	SUB L		;
	RET C		;
	DEC L		;
	XOR A		;
	LD E (HL)	;
	LD (HL) A	;
	SRA E		;
	RET C		;
	SLA E		;
	SBC A L		;
	LD D A		;
	PUSH DE		;
	LD E L		;
	LD D L		;
LOG1	INC L		;
	BIT 7 (HL)	;
	JR NZ LOG2	;
	CALL DFACC
	INC E		;
	JR LOG1	;
	EJECT
LOG2	PUSH DE		;
	CALL STF4
	LD DE C1DSR2	;
	PUSH DE		;
	CALL ADD
	LD E T4-FH
	CALL EXT1F
	POP DE		;
	CALL SUB
	LD E T4-FH
	CALL DIV
	LD DE TB2663	;
	CALL PREP	;
	CALL STF4
	POP DE		;
	POP HL		;
	ADD HL HL	;
	ADD HL HL	;
	XOR A		;
	SBC HL DE	;
	PUSH AF		;
	JP P LOG3	;
	XOR A		;
	EX DE HL	;
	LD H A		;
	LD L A		;
	SBC HL DE	;
LOG3	EX DE HL	;
	CALL FLT
	POP AF		;
	CALL M NEG
	LD DE CHALF
	CALL SUB
	LD DE CLN2
	CALL MULT
	LD E T4-FH
	CALL ADD
	LD A (HL)	;
	CP 0F8H		;
OZTRY	JP Z STOZ
	JP STO		;
	EJECT
;------
; RAISE TO A POWER
;------
RAISE:	PUSH	DE
	EX	DE,HL		;POWER ?
	CALL	CKINT		;INTEGER ?
	JR	NZ,RS2	;NO
	LD	A,E
	CP	32		;YES - <32 ?
	JR	NC,RS2	;NO
RS3:	LD	B,D		;YES
	LD	C,E
	CALL	STF4
	PUSH	HL
	LD	HL,CE0		;FACC=1
	CALL	LDF
	POP	DE
	POP	HL		;D,E=(ARG)
RS5:	DEC	C		;DONE ?
	JP	M,STO		;YES - EXIT
	PUSH	DE
	LD	L,B
	CALL	MORD		;* OR /
	POP	DE
	RET	C
	JR	RS5		;DO NXT
RS2:	LD	HL,FACC+1	;MUST DO BY LOG-EXP
	LD	A,(HL)
	OR	A
	DEC	HL
	POP	DE
	JP	Z,STOZ
	PUSH	DE
	CALL	LOG		;LOG
	POP	DE
	RET	C		;AS OFLO
	CALL	MULT		;*POWER
	RET	C		;AS OFLO
	JP	EXP		;EXP AND EXIT
	EJECT
;-----
; RANDOM NUMBER GENERATOR
;-----
RA:	DEFB	18
	DEFB	185
	DEFB	176
	DEFB	181
;
FRC:	DEFB	54
	DEFB	25
	DEFB	98
	DEFB	233
;
RND:	CALL	CL20		;CLR FACC,T1
	LD	DE,T1+1		;LAST RND TO T1
	LD	HL,RANDNO
	PUSH	HL
	LD	BC,4
	PUSH	BC
	LDIR
	LD	HL,RA		;NOW MULT BY RA
	LD	C,4		;4 BYTES
RND2:	PUSH	HL
	LD	A,(HL)
	LD	B,8		;8 BITS / BYTE
RND1:	PUSH	BC
	PUSH	AF
	LD	HL,FACC+4
	XOR	A
	CALL	SQSH5B
	POP	AF		;ADD ?
	RLCA
	PUSH	AF
	CALL	C,FLADD		;YES
	POP	AF
	POP	BC
	DJNZ	RND1		;DO NXT BIT
	POP	HL
	INC	HL
	DEC	C
	JR	NZ,RND2	;DO NXT BYTE
	LD	HL,FACC+4	;NOW ADD RC
	LD	DE,FRC+3
	LD	B,4
	CALL	FLA3
	INC	HL		;STO IN RAND NO
	POP	BC
	POP	DE
	LDIR
	JP	NORM		;NORMALISE
	EJECT
;-------
; ARCSIN AND ARCCOS
;-------
;----
; FIND SQRT(1-FACC*FACC)
;-----
CAL1:	LD	HL,FACC
	LD	C,(HL)
	PUSH	BC
	RES	0,(HL)		;MAKE +VE
	PUSH	HL
	CALL	STF4		;STO IN T4
	POP	DE
	CALL	MULT		;*
	CALL	NC SBSR2	;1-
	CALL	NC SQRT		;SQRT
	POP	BC		;AS C= ORIG SIGN
	RET
;-----
; FIND ATAN(X/Y) OR PI/2 - ATAN(Y/X)
;-----
CAL2:	PUSH	BC
	LD	DE,T4		;Y/X
	CALL	DIV		;
	INC	HL		;ARG=0 ?
	JR	NC,CAL2B	;
	LD	(HL),0		;YES
	DEC	HL
	JR	CAL2A
CAL2B:	LD	A,(HL)		;ARG=1 ?
	OR	A
	DEC	HL
	JR	Z,CAL2C
	LD	A,(HL)		;X < Y ?
	SUB	2
	JP	P,XLY		;YES
	CALL	ATAN		;NO - ATAN(Y/X)
CAL2C:	CALL	SBSR1		;FACC=PI/2-FACC
CAL2A:	POP	BC		;SIGN OF ORIG NUM
	LD	A,C
	AND	1		;-VE - INV FACC
	XOR	(HL)
	LD	(HL),A
	RET
XLY:	CALL	RECIP		;AS ATAN(X/Y)
	CALL	ATAN
	JR	CAL2A
	EJECT
;----
; ARCSIN
;-----
ASIN:	CALL	CAL1
	RET	C
	JR	CAL2
;----
; ARCCOS
;------
ACOS:	CALL	CAL1
	RET	C
	PUSH	BC
	LD	DE,T4		;SWOP T4 AND FACC
	CALL	EXT1F
	POP	BC
	CALL	CAL2
	BIT	0,C		;ORIG NUM ?
	RET	Z		;+VE
	LD	DE,FCPI		;-VE SO ADD PI
	JP	ADD
;-----
; TANGENT
;-----
TAN:	LD	HL,FACC		;TO T5
	CALL	PUSHF
	CALL	COS
				;EXCH WITH T5
	CALL	EXT1F
	CALL	SIN
				;DIV BY COS
	JP	DIV
	EJECT
;-----
; CONSTANTS
;------
CE0:	DEFB	2,1,0,0,0,0		;1
FCPI:	DEFB	2,3,36,63,106,137	;PI
C2DPI:	DEFB	0,162,249,131,110,78	;2/PI
CLN2:	DEFB	0,177,114,23,247,210	;LN(2)
CHALF:	DEFB	0,128,0,0,0,0		;0.5
CPID2:	DEFB	2,1,146,31,181,68	;PI/2
C1DLN2	DEFB 002H,  1,113, 84,118, 83	;1/LN2
C1DSR2	DEFB 000H,181,  4,243, 51,250	;2^-.5
 
;The rest of these constants and the following coefficients
;must be linked onto the same 256-byte page.
 
CON	EQU	($/100H)*100H
CEM20	DEFB 0F0H,2FH,39H,42H,19H,26H	;10**-20
CEM4	DEFB 0FEH,06H,8DH,0B8H,0BAH,0C7H;10**-4
CEM1	DEFB 00H,19H,99H,99H,99H,99H	;10**-1
CE20:	DEFB	18,5,107,199,94,45	;10**20
CE4:	DEFB	4,39,16,0,0,0		;10**4
CE1:	DEFB	2,10,0,0,0,0		;10**1
;-----
; TABLES OF COEFFICIENTS
;----
TB132	DEFB 0BH, 31, 24,135	;C4
	DEFB 03H,128, 68, 74	;C3
	DEFB 0BH,232,201, 67	;C2
	DEFB 13H,  1, 76,249	;C1
	DEFB 03H, 58,164, 85,0	;C0
TB1044	DEFB 0F4H,  1,104,176,125	;E7
	DEFB 0F4H,  9,103,235, 50	;E6
	DEFB 0F4H, 87,247,113,194	;E5
	DEFB 005H,  2,118, 16,112,166	;E4
	DEFB 005H, 14, 53,149,128,159	;E3
	DEFB 005H, 61,127,121,241,146	;E2
	DEFB 005H,177,114, 24, 15,139	;E1
	DEFB 005H,255,255,255,255,212,0	;E0
	EJECT
TB2663	DEFB 003H, 60,212,247		;L4
	DEFB 003H, 73,  6,101		;L3
	DEFB 004H,102,102,202,184	;L2
	DEFB 005H,170,170,170, 34,234	;L1
	DEFB 011H,  2,0			;L0
TB3342	DEFB 0EBH, 57,134,140		;S5
	DEFB 0F4H, 10,128,127,192	;S4	
	DEFB 00DH,  1, 50,209, 18,  1	;S3
	DEFB 005H, 20,102,187,252, 37	;S2
	DEFB 00DH,165, 93,231, 39,140	;S1
	DEFB 015H,  1,146, 31,181, 68,0	;S0
TB4995	DEFB 0FCH, 44,224,239,117	;A11
	DEFB 005H,  1, 61,233, 77,234	;A10
	DEFB 00DH,  4, 31,229,128,128	;A9
	DEFB 005H,  8,193,246,124,164	;A8
	DEFB 00DH, 13,229, 60,188,  1	;A7
	DEFB 005H, 18,140,142,  9,127	;A6
	DEFB 00DH, 22,253, 74, 47, 64	;A5
	DEFB 005H, 28,102, 17, 15,182	;A4
	DEFB 00DH, 36,145, 38, 78,135	;A3
	DEFB 005H, 51, 51, 36,113,218	;A2
	DEFB 00DH, 85, 85, 85,  9,167	;A1
	DEFB 005H,255,255,255,255,191,0	;A0
                              