	GLOBAL TLIO	;Internal routines
	GLOBAL LIIO
	GLOBAL TVIO
	GLOBAL WRNC
	GLOBAL EDOUT
	GLOBAL EDOUT1
	GLOBAL GETREG
	GLOBAL REMCUR
	GLOBAL SHOCUR
			;External routines
	GLOBAL GETCR0
	GLOBAL INLINE
	GLOBAL HOLD
	GLOBAL CPDB
	GLOBAL CURRT
	GLOBAL WAIT
	GLOBAL EDITA
	GLOBAL EDITCH
	GLOBAL GETCUR
	GLOBAL BACAL
	GLOBAL LORDEP
	GLOBAL ADHLA
	GLOBAL RDBYTE
	GLOBAL ZMKBUFF
	GLOBAL LDREGS
	GLOBAL STREGS
	GLOBAL HLTTCAPS
	GLOBAL RDKEY
	GLOBAL IOPON
	GLOBAL IOPOFF
 
	GLOBAL PHPOS	;External addresses
	GLOBAL RST8
	GLOBAL PLLEN
	GLOBAL PZLEN
	GLOBAL TV1
	GLOBAL TV2
	GLOBAL EXCESS
	GLOBAL TVCUR
	GLOBAL TVRAM
	GLOBAL OBFEND
	GLOBAL COPST
	GLOBAL ENREGMAP
 
LF	EQU 0AH		;Characters, codes & parameters
CR	EQU 0DH		
SNDLNE	EQU 05H
BLANK	EQU 20H
CLEAR	EQU 1FH		
UNCHR	EQU 68H		
DISPCOM	EQU 0A0H
NULLCOM	EQU 0D0H
READY	EQU 5
SIZE	EQU 3
MD3	EQU 02H
LONG	EQU 5
ZGETCUR	EQU 0CFH	;Restart routine
	EJECT
UNUSED	EQU 0
TVMD1	EQU 1
TVMD2	EQU 2
ORIGDEP	EQU 3
DEP	EQU 4
LL	EQU 5
EL	EQU 6
FLAGS	EQU 7
EXFLGS	EQU 8
LN	EQU 9
FRM	EQU 10
WIN	EQU 11
INPB	EQU 12
INPC	EQU 13
CHAR	EQU 14
DCHR	EQU 15
CSTO	EQU 16
BSTO	EQU 17
ESTO	EQU 18
DSTP	EQU 19
FLGSTO	EQU 20
 
SYNTAXERR	EQU 110
NOMAINSERR	EQU 111
 
BBCEXC	EQU 24
DEPTH	EQU 24
WLEN	EQU 16
TVLEN	EQU 40
LILEN	EQU 80
ENREG	EQU 7
VIDEO	EQU 2
STREG	EQU 20		;10 for Bee
MAINSP	EQU 2
 
SNDXYFLG	EQU 6	;IX EXFLGS
SNDYFLG		EQU 5
SNDCCFLG	EQU 7
CURSHOFLG	EQU 4
 
SFTFLG	EQU 7		;IX FLAGS
IFLG	EQU 6
CNSFLG	EQU 5
CSIFLG	EQU 4
XYFLG	EQU 3
YFLG	EQU 2
ESCFLG	EQU 1
TVMFLG	EQU 0
 
TVFLG	EQU 7		;HL FLAGS
OLFLG	EQU 3
LIFLG	EQU 5		;STLIN = BUFFER + 11
CRFLG	EQU 0		;(STLIN)+4 has FLAGS
PGEFLG	EQU 2		;(STLIN)+1 has WINDOW POS. (B)
INPFLG	EQU 4		;(STLIN)+0 has CURSOR POS. (C)
CHRFLG	EQU 6		;(STLIN)+3 has MAX LINE LEN. (D)
HLDFLG	EQU 1		;(STLIN)+2 has CHAR. COUNT (E)
			;(STLIN)+5 & on is LINE RAM
	EJECT
SYNCHK	CALL HLTTCAPS
	CP 'S'
	JR Z SLCHK
	CP 'L'
	JR NZ SHORT
	LD B 80
SLCHK	DEC C
	INC HL
	RET Z
SHORT	CALL RDBYTE
	RET C
	OR A
	SCF
	RET Z
	CCF
	LD D A
	RET
 
SETCNS	LD E 20H	;CNSFLG
	LD A 10
	LD (PZLEN) A
	LD A B
	LD (PLLEN) A
	CP 80
	RET C
	LD A 17
	LD (PZLEN) A
	RET
 
CALFILE	PUSH HL
	POP IX
	LD A L
	SET 0 A
	BIT 3 (IX+EL)
	JR NZ CF1
	LD A 6DH
	BIT 6 (IX+LL)
	JR Z CF1
	LD A 6FH
CF1	SUB L
	AND 7FH
	ADD A 10H
	RET
	EJECT
RESET1	CALL CALFILE
	LD E A
	SUB (HL)	;NEW DISP-OLD DISP
	RET Z		;SAME ANSWER AS BEFORE
	PUSH AF
	PUSH HL
	PUSH HL
	POP IX
	LD A (IX+EL)
	LD D (IX+ORIGDEP)
	CALL BACAL	;D*A INTO BC
	LD HL 9		;4 REGS & 1 FLAG & 4 ENDS!
	ADD HL BC
	LD C L
	LD B H		;BC = NUMBER TO MOVE
	POP HL
	LD A (HL)
	LD (HL) E	;NEW NUMBER
	CALL ADHLA	;HL > OLD START
	POP AF		;A = +/- DISP DIFFERENCE
	JR NC MOVEUP	;NEW DISP > OLD DISP
	ADD A L		;A = -DISP DIFFERENCE
	LD E A
	LD A H
	ADC A 0FFH	;Basil's modification
	LD D A		;DE > NEW START
	LDIR
	RET
 
MOVEUP	ADD HL BC	;HL > OLD END + 1
	DEC HL		;HL > OLD END
	ADD A L
	LD E A
	LD A H
	ADC A 0
	LD D A
	LDDR
	RET
	EJECT
TVSYN	IN A (STREG)
	BIT MAINSP A
	LD A NOMAINSERR
	SCF
	RET Z
	LD D DEPTH
	LD A B
	OR A
	JR NZ ERRET
	LD B TVLEN
	LD A C
	OR A
	CALL NZ SYNCHK
	JR C ERRET
	LD A (EXCESS)
	LD C,A
	ADD A B
	BIT 6 B
	JR Z IS40
	ADD A,C
IS40	LD C A
LIOP	PUSH DE
	PUSH BC
	LD HL 26
	BIT 3 C
	JR NZ NOTBBC
	LD HL 154
NOTBBC	LD A C
	CALL BACAL
	ADD HL BC
	LD B H
	LD C L
NOCAR	DEFW ZMKBUFF
	POP BC
	POP DE
	RET C
	LD A E
	OR A
	LD E 0
	CALL Z SETCNS
	XOR A
	EJECT
	PUSH HL
	INC HL
	LD (HL) MD3
	BIT 6 B
	JR Z NOT80
	SET 6 (HL)
NOT80	CALL LORDEP	;in place of
			; INC HL
			;three times
			;- same but loads ORDEP
	LD (HL) D	;DEPTH
	INC HL
	LD (HL) B	;LINLEN
	INC HL
	LD (HL) C	;EXLEN
	INC HL
	LD (HL) E	;FLAGS
	LD B 9
PUTR1	INC HL
	LD (HL) A
	DJNZ PUTR1
	POP HL
	CALL CALFILE
	LD (HL) A
GETREG	PUSH HL
	POP IX
	PUSH AF
	LD A (HL)
	CALL ADHLA
	POP AF
	LD BC GETCUR
	LD (RST8) BC
	JP LDREGS
 
ERRET	LD A SYNTAXERR
	SCF
	RET
 
TVST	CALL REMCR0	;to start TV and remove cursor
TVST1	LD (TVRAM) HL
	RET
	EJECT
LIIO	DEFB 5
	DEFB LIOPIN-$
	DEFB LIOPIN-$
	DEFB INP1-$
	DEFB OUT1-$
	DEFB LICLS-$
	DEFB RESET-$
 
LIOPIN	LD A B
	OR A
LIOP1	JR NZ ERRET
	LD A C
	OR A
	LD A LILEN
	CALL NZ RDBYTE
	JR C ERRET
	CP 10H
	JR C ERRET
	LD B A
	LD C A
	XOR A
	INC A
	LD D A
	CALL LIOP
	RET C
	LD A 28H
	JR OPEN
 
TLIO	DEFB 5
	DEFB TLOPIN-$
	DEFB TLOPIN-$
	DEFB TVINP-$
	DEFB TVOUT-$
	DEFB TVCLS-$
	DEFB RESET-$
 
TLOPIN	CALL TVSYN
	LD E 0A0H
	JR TVTL
 
TVIO	DEFB 5
	DEFB TVOPIN-$
	DEFB TVOPIN-$
	DEFB TVINP-$
	DEFB TVOUT-$
	DEFB TVCLS-$
	DEFB RESET-$
 
RESET	JP RESET1
	EJECT
TVOPIN	CALL TVSYN
	LD E 80H
TVTL	RET C
	CALL IOPON
	LD A (IX+DEP)
	CP 1
	JR NZ TVTL1
	SET OLFLG E
TVTL1	LD A E
OPEN	LD (HL) A
	LD A CLEAR
	CALL OUT2
	LD A (IX+DEP)
	CALL GETCR0
	LD (HL) C
	INC HL
	LD (HL) C
	INC HL
	LD (HL) BLANK
	INC HL
	LD (HL) BLANK
LICLS:	XOR A
	RET
 
TVCLS	LD BC (TVRAM)
	XOR A
	SBC HL BC
	JR NZ TVCLS1
	LD (TV2) A
	LD HL,ENREGMAP
WTBLNK:	BIT VIDEO,(HL)
	JR NZ WTBLNK	;wait for video to blank
TVCLS1	OR A
	JP IOPOFF
 
TVOUT	CALL TVST
OUT1	CALL GETREG
OUT2	CALL OUT
	JP INEND
	EJECT
TVINP	CALL TVST
INP1	CALL GETREG
	LD A (IX+EXFLGS)
	RLA
	JR NC NOTCC
SENDCC	CALL RESEX
	DEFB ZGETCUR
	OR A
	RET
 
NOTCC	RLA
	JR NC LINP
SENDXY	RLA
	JR C SENDY
	SET SNDYFLG (IX+EXFLGS)
	LD A C
	INC A
	OR A
	RET
 
SENDY	CALL RESEX
	LD A (IX+LN)
	ADD A B
	INC A
	OR A
	RET
 
LINP	SET INPFLG (HL)	;comment
	RES XYFLG (IX+FLAGS)
	RES YFLG (IX+FLAGS)
	BIT CHRFLG (HL)	;
	JR NZ GOTCHS-$	;
NOTVST	LD (IX+INPB) B
	LD (IX+INPC) C
	LD A B
	OR C
	JR Z RDLP
	SET HLDFLG (HL)
RDLP:	CALL SHOCUR
	CALL RDKEY	;
	CALL REMCUR
	CALL EDITA
	BIT CHRFLG (HL)
	JR Z RDLP
	CALL HOLD
GOTCHS	RES CRFLG (HL)
	XOR A
	LD (IX+INPB) A
	LD (IX+INPC) A
	EJECT
	CALL CPDB
	JR C MORE
NOMORE	CALL INLINE	;sets CR flags in XEDIT
	LD A LF
	CALL OUTR
	BIT PGEFLG (HL)
	JR Z LOADCR
	SET CHRFLG (HL)
	LD A (IX+LN)
	OR A
	JR NZ LOADCR
	RES CHRFLG (HL)
	RES PGEFLG (HL)
LOADCR	LD A CR		;
 
INEND	PUSH AF
	BIT CNSFLG (IX+FLAGS)
	JR Z INEND1
	LD A C
	INC A
	LD (PHPOS) A
INEND1	BIT CURSHOFLG (IX+EXFLGS)
	CALL NZ SHOCUR
	POP AF
	OR A
	JP STREGS
 
MORE	PUSH HL
	DEFB ZGETCUR
	POP HL
	PUSH AF
	CALL CURRT
	POP AF
	JR INEND
 
RESEX	LD A (IX+EXFLGS)
	AND 1FH
	LD (IX+EXFLGS) A
	RET
	EJECT
OUT	RES PGEFLG (HL)
	RES CHRFLG (HL)
	PUSH AF
	CALL RESEX
	LD A (IX+FLAGS)
	AND 0FH
	JR NZ PNWAIT
	POP AF
	CP CR
	JR NZ OUTR
	CALL OUTR
	LD A LF
OUTR	BIT OLFLG (HL)
	JR Z NWAIT
	CP LF
	JR Z OLLF
EDOUT	BIT CRFLG (HL)	;
	JR Z DOEDIT
	CP CR		;
	RET Z
EDOUT1	BIT INPFLG (HL)	;
	PUSH AF
	CALL Z WAIT
PNWAIT	POP AF
NWAIT	RES INPFLG (HL)	;
DOEDIT	CALL EDITA	;
 
WRNC	CALL SETWIN
	XOR A		;
	JR WR-$		;
 
OLLF	RES CHRFLG (HL)
	RET
 
MODIFY	CP 20H
	JR C UNREC
	CP 0E4H		;'POUND'
	JR NZ MODIF1
	LD A 5FH
	RET
MODIF1	CP 5FH
	JR Z UNREC
	CP 7BH
	RET C
UNREC	OR A
	LD A BLANK
	RET Z
	LD A UNCHR
	RET
	EJECT
UNLIN	EQU 5FH
DOOR	EQU 7FH
 
REMCUR:	PUSH AF
	CALL WRNC
	POP AF
	BIT TVFLG (HL)
	RET Z
REMCR0	PUSH AF
	PUSH HL
	DI
	LD HL TV2
	BIT 6 (HL)
	LD (HL) 80H	;starts TV
	JR Z REMCR1	;if cursor not in use
	INC HL
	LD A (HL)
	LD HL (TVCUR)
	LD (HL) A
REMCR1	EI
	POP HL
	POP AF
	RET
 
SHOCUR:	CALL WRC
	BIT TVFLG (HL)
	RET Z
	PUSH HL
	DEC HL
	LD A (IX+LL)
	CP C
	JR Z SHOCR1
	INC HL
	LD A 1
	AND (HL)
	XOR 1
SHOCR1	PUSH AF
	DEFB ZGETCUR
	DI
	LD (TVCUR) HL
	LD HL TV1
	LD (HL) A
	DEC HL
	POP AF
	JR Z SHO2
	SET 5 (HL)
SHO2	SET 6 (HL)
	DEC HL
	LD (HL) 10H
	EI
	POP HL
	RET
	EJECT
WRC	CALL SETWIN
	LD A C
	SUB (IX+WIN)
	INC A
WR	PUSH HL
	PUSH DE
	PUSH BC
	LD D A
	LD C (IX+WIN)
	DEFB ZGETCUR
	LD C D
WRDISP	;Write data pointed to by HL to COP display.
	LD DE OBFEND
	LD B,16
TRANSLP	CALL HLTTCAPS
	CALL MODIFY
OK3	DEC C		;
	JR NZ STDE	;
	SET 7 A
STDE	LD (DE),A
	INC HL
	DEC DE
	DJNZ TRANSLP
WTLP	LD HL COPST
	DI
	BIT READY (HL)
	RES READY (HL)
	DEC HL	;POINT BACK AT ACKOWLEDGE
	JR NZ WRD1
	LD A DISPCOM
	CP (HL)
	JR Z WRD2
	LD A NULLCOM
	CP (HL)
	JR Z WRD1
	EI
	JR WTLP
WRD1	LD (HL) DISPCOM
		;PUT DISP. UPDATE COMMAND INTO COPCTL
WRD2	EI
	POP BC
	POP DE
	POP HL		;
	RET		;
	EJECT
SETWIN	BIT LIFLG (HL)
	JR NZ SETWN1
	POP AF
	RET
SETWN1	LD A C
	CP (IX+WIN)
	JR NC CHKTOP
	LD (IX+WIN) C
	RET
CHKTOP	LD A (IX+WIN)
	ADD A WLEN
	CP C
	JR Z CHANGE
	RET NC
CHANGE	LD A C
	CP (IX+LL)
	PUSH AF
	SUB WLEN-1
	LD (IX+WIN) A
	POP AF
	RET NZ
	DEC (IX+WIN)
	RET

	END
