		NAME MAIN
		
		GLOBAL DEV376
		GLOBAL DEVI2C
		GLOBAL DEVPS2
		GLOBAL DEVLCD
		GLOBAL DEVSER
		GLOBAL DEVMMU
		GLOBAL RAMAD
		GLOBAL MENU
		GLOBAL SOUTAS 
		
		
		DEV376 EQU $30 							;CH376S DEVICE
		DEVI2C EQU $70 							;I2C DEVICE
		DEVPS2 EQU $48 							;PS/2 Keyb
		DEVLCD EQU $78
		DEVSER EQU $20 							;Serial
		DEVMMU EQU $00 							;MMU
		COPSTA EQU 6 							; COP STATUS PORT
		INTENB EQU $E0							;OUT $E0,1 TO ENABLE INTERRUPTS
		
;PINS EQU DEVLCD 	;LCD INSTRUCTION PORT
;PDAT EQU DEVLCD+01	;LCD DATA SEND PORT
		
		
;PS2OUT EQU DEVPS2
;PS2IN EQU DEVPS2 + 1
		
		@TXTRAM EQU 642 						; 5 SHL 7 +2
		
;ORG $8000-255							;RAM FOR BOOTLOADER VARS NOT NEEDED ON NB
		
		
		ORG $7A 							;$F1 OS VARS UNTIL $FF
		@KEYCTR DEFS 1 							;IN NB SYSTEM VARS
		@SERERR DEFS 1
;@SERER2 DEFS 1
		@DISPCT DEFS 1
		@LCDCX DEFS 1 							;DISPLAY X POS (0..F  FOR 1..16)
		@LCDCX DEFS 1 							;DISPLAY Y POS (0 OR 1 FOR LINE 1 AND 2)
		@LCD_DSPCTRL DEFS 1 						;LCD I2C 16X2
		@LCD_DSPMODE DEFS 1 						;LCD I2C 16X2
		@LCD_STSMASK DEFS 1 						;LCD I2C 16X2
		@STRG_STAT DEFS 1 						;STORAGE_NEW STAUS BIT 0=0 NOT CONNECTED, 1=CONNECTED, BIT 7 DEVICE EXISTS
		@USBBUF DEFS 50 						;CH376 USB BUFFER
		@BANKS DEFS 8 							;8 PAGES FOR THE 8 BANKS 0..7
		@TMPG DEFS 4 							;TEMP PAGE FOR VIDEO VGA
;CAN BE TRANSFERED TO RAM ONLY FOR BOOTLOADER USE ATL_UTILS
		@PRGEX DEFS 2 							;ONLY FOR BOOTL
		@TVSTAT DEFS 1 							;ONLY FOR BOOTL
		@B2DINV DEFS 8 							;BINARY NUMBER TO BE CONVERTED
		@B2DBUF DEFS 20 						;ASCCI STRING OF THE NUMBER
		@B2DEND DEFS 1 							;0 FOR TERMINATE THE STRING
		@LINESTR DEFS 2 						;ADDRESS OF LINEBUF FOR PRINTING ON STRING
		@LINEPOS DEFS 1
		@NUMBUF DEFS 7
		@MYNUM DEFS 13 							;10CHARS MESSAGE FOR NUMBER AND 3 TERMINATED
		
;@BUFFER DEFS 22 						; 20 BYTE BUFFER FOR I2C USAGE
		@BUFFER EQU USBBUF 						;USE USBBUF  FOR I2C
;@STRGBUFF DEFS 40 						;USED FOR DIRECTORY AND FILENAME
		@STRGBUFF EQU USBBUF 						;USE USBBUF  FOR I2C
		
;DISPCT EQU 8+4		;DISPLAY CONTROL
;BIT 0= BLINK CURSOR POS CHAR
;BIT 1= CURSOR ON OFF
;BIT 2=	DISPLAY ON OFF
;BIT 3= 1
		RAMAD EQU $6000
		
		STACKP EQU RAMAD + 100 						;100
		
		MYNUM EQU $6500
		
		KDATA EQU 6 							;DATA FLAGS SET TO 1 IF UNTRANSMITTED
		
		ORG $8000
		
;ADD A,B			;$80 SIGNALS NO ROM HERE FOR NB OS
		CPL 								;ROM IS HERE
		JP START
		JP GETKEY 							;CALL HERE FROM NB ROM TO FIND THE GTNBKEY  $8004
		JP RSTX 							; CALL HERE FROM NB TO FIND SERIAL TRASMIT  $8007
		JP RSRX 							; CALL HERE FROM NB TO FIND SERIAL RECEIVE  $800A
		JP NBSTLCD 							;CALL HERE FROM NB TO FIND THE NBSETLCD $800D
		JP MENU
		JP CHKKEY							;CALL HERE FROM NB TO FIND THE CHKKEY $8013
;FLAGS MUST BE RETAINED NO CARRY FLAG MEANS BACKSPACE IS GO LEFT
@OS_PRINTCHAR:	CALL RS_TX
		RET
		
;HL POINTS TO ZERO TERMINATED MSG
;IX,A DESTROYED
@OS_PRINTTEXT:	LD A, (HL)
		CP 0
		RET Z
		PUSH HL
		CALL OS_PRINTCHAR
		POP HL
		INC HL
		JR OS_PRINTTEXT
		
;PRINTS A ZT MESSAGE FOLLOWING THE CALL
@OS_PRINTMSG:	POP HL
		CALL OS_PRINTTEXT
		INC HL
		PUSH HL 							;CONTINUE AFTER THE MESG
		RET

CHKKEY:		LD B,A
		CALL RS_KEYRD		
		LD A,B
		LD D,$A0 							;DISPCOM	
		RES 6,(HL)							;KDATA= BIT 6	
		RET

GETKEY:		;CALL RS_KEYRD							;CHECK IF KEY AVAIL
		;JR NZ,KEYAVAIL
		;XOR A								;NO KEY
		;RET

KEYAVAIL:	PUSH HL
		PUSH DE
		PUSH BC
		CALL RS_RX 							;GET A CHAR FROM RS232 OR PS2_KEYB
RGT:		CALL GTNBKEY 							;KEY PRESSED
;for trapping
;PUSH AF
;CALL SOUTAS
;LD HL,$026F  ;FLAGS
;LD A,(HL)
;CALL SOUTAS
;POP AF
;
		POP BC
		POP DE
		POP HL		
		CP 0 								;CHECK IF INVALID KEY
		RET NZ
		RES KDATA (HL) 							; KEY INVALID RESET KDATA TEST BIT
		INC HL 								;GET TO THE LAST VALID KEY
		LD A, (HL)
		DEC HL
		RET
		
RSTX:		CALL RS_TX
		RET
		
RSRX:		CALL RS_RX
		RET
		
		
;HL HAS THE STRING TO OUTPUT
;D HAS THE NUMBER OF BYTES
;STRING IS IN REVERSE ORDER
NBSTLCD:	PUSH DE
		LD B, D 							;TOTAL CHARS
		DEC B
		DEC B 								;SKIP 2
		LD DE, 17 							;START FROM THE END
		ADD HL, DE
		XOR A
		LD DE, LCDCX 							;LCD POSITION
		LD (DE), A
		INC DE
		LD (DE), A
;D HAS THE COLUMN E HAS THE ROW
		PUSH DE
		LD D, A
		LD E, A
		CALL LCD16_SETCURS 						;SET LCD TO LCDCX,LCDCY
		POP DE
		DEC DE 								;POSITION ON LCDCX
		LD C, 0 							;LCD POSITION COUNT
NBSETLP:	LD A, (HL)
		BIT 7, A 							;CHECK IF CURSOR HERE
		JR Z, NBNXT
		PUSH AF
		LD A, C
		LD (DE), A 							;POSITION CURSOR
		POP AF
		RES 7, A 							;CLEAR CHAR FROM CURSOR INFO
NBNXT:		CALL LCD16_PRCHR 						;OUTPUT CHAR TO LCD
		DEC HL
		INC C
		DJNZ NBSETLP 							;LOOP NEXT CHAR
		LD D, 0
		LD E, C
		CALL LCD16_SETCURS 						;POSITION CURSOR
		POP DE
		RET
		
		
		
SOUTAS:		PUSH AF 							;SERIAL PRINT ASCII IN DECIMAL
		LD H, 0
		LD L, A
		LD DE, MYNUM
		CALL OUTASC
		
		LD A, 10
		LD (DE), A
		INC DE
		LD A, 13
		LD (DE), A
		INC DE
		XOR A
		LD (DE), A
		
		LD HL, MYNUM
		CALL RS_TXT
		POP AF
		RET
		

FONTNAME1	DEFM "\CHSET4.CHR"
		DB 0
FONTNAME2	DEFM "\CHSET2.CHR"
		DB 0
		
LOADFONTS:	LD B,2			;BANK2
		LD A,8			;VIDEO PAGE FOR FONTS 		
		CALL PUTPGINBANK		
		LD HL,FONTNAME1
		LD BC,3000		;MAX FILE SIZE
		LD DE,$4000		;0000 ON PAGE 8
		CALL STRG_LOADFILE
		JR NC, LFFILOK
		HALT			;STOP EXEC
LFFILOK:	LD HL,FONTNAME2
		LD BC,3000		;MAX FILE SIZE
		LD DE,$5000		;1000h ON PAGE 8
		CALL STRG_LOADFILE		
		JR NC, LFFILOK2
		HALT			;STOP EXEC
LFFILOK2:	LD A,14			;BANK 2 ON NBRAIN RESTORE PAGE 14
		LD B,2
		CALL PUTPGINBANK
		RET	


START:		DI
		LD A, (0000)
		CP $F3
;JP Z,$E090	;BOOT NEWBRAIN
		JP NZ, CN1
		CALL STNEWD 							;SET NEWDRIVERS AND DEFSTORE DEVICE
		LD HL, STRBT
		CALL RS_TXT 							;OUTPUT MENU COMMANDS AT RS232
		JP ALLOK
		
		
		
;OUT 5 TIMES AT PORT 99 (0 AND 255)
CN1:		LD B, 5
AGN1:		LD C, 99
		LD A, 0
		OUT (C), A
		LD C, 99
		LD A, 255
		OUT (C), A
		DJNZ AGN1
		
		
;TEST RAM
		
		LD DE, 1
		LD A, 0 							;WRITE 0
		LD C, A
		LD HL, RAMAD
		LD B, 8
AGN2:		LD (HL), A
		LD C, (HL)
		CP C
		JP NZ, ERR
		ADD HL, DE
		ADD A, 32 							;WRITE +32
		LD C, A
		DJNZ AGN2
		
		LD B, 5
AGN3:		LD C, 98
		LD A, 64
		OUT (C), A
		ADD A, 128
		OUT (C), A
		DJNZ AGN3 							; SIGNAL ALL OK CONTINUOUS 10 TIMES ON PORT 98
		JP BOOT
		
		
ERR:		LD C, 97
		LD A, 64
		OUT (C), A
		
		JP ERR 								;DO AGAIN PORT 1
		
SCRDATA		DB 				   $15,$02,$00,$18,$18,$28,$40,$20
		DB $00,$02,$00,$00,$00,$00,$0A,$00,$00,$00,$FF,$00,$AB,$00,$00,$00
		DB $00,$B1

SETSCRDATA:	LD HL,SCRDATA
		LD DE,$268
		LD BC,26
		LDIR
		LD HL,$5C
		LD (HL),$68		;VIDEO START
		INC HL
		LD (HL),$02
		RET

BOOT:		IM 1
		DI
		
		
		LD SP, STACKP
		
		;XOR A
		;OUT (7), A 							; tv oFF
		;LD A, 2
		;OUT (12), A 							;TV CONTROL
		
		CALL I2C_INIT
		CALL LCD16_INIT 						;LCD 16x2 Initialized
		LD HL, STR0
		CALL LCD16_PRINT
		
;LD HL,STR1
;CALL DELAY
		LD A, 1 							;1=115200 BPS
		CALL RS_INI 							;RS232 INITIALIZE
		LD HL, STR00
		CALL RS_TXT
		
		
		LD HL, STRSCR
		CALL RS_TXT
		
		
		
;LD HL,STR01
;CALL RS_TXT	;OUTPUT WAITING AT RS232
;LD A,3
		
;CALL DELAY
		
ALLOK:		CALL SETSCRDATA
		CALL SCCLS 							;CLEAR SCREEN BUFFER
		
		LD HL, STR02
		CALL SCPRN 							;PRINT WAITING AT SCREEN BUFFER
				
		CALL LOADFONTS							;LOAD NEWBRAIN FONTS TO VIDEO RAM
		CALL TVON
		
MENU:		
		LD HL, STRMN
		CALL RS_TXT 							;OUTPUT MENU COMMANDS AT RS232
		LD HL, STR01
		CALL RS_TXT 							;OUTPUT WAITING AT RS232
		
		CALL TVOFTM
		CALL LCD16_CLR
		
		LD HL, STR02
		CALL LCD16_PRINT
		CALL RESTV
		
		LD HL, SMENU
		LD A, 2
		CALL SCPRN
		
		CALL GET_CHAR 							;TAKE A CHAR FROM RS232 OR PS2 KEYB
;CALL RS_RX	; WAIT FOR A CHAR IN RS232
		
		CP 'U' 								;UPLOAD PROGRAM
		CALL Z, UPLOD
		CP 'X'
		JP Z, EXEC
		CP 'T'
		CALL Z, RSTST
		CP 'S'
		CALL Z, TXTSCR
		CP 'N'
		JP Z, $E003
		CP 'M'
		JP Z, GONB 							;$E090
		CP 'C'
		CALL Z, TVON
		CP 'V'
		CALL Z, TVOFF
		CP 'I'
		CALL Z, UPLOD2
		CP 'Y'
		CALL Z, RSTST2
		CP 'H'
		CALL Z, XMTST
		CP 'J'
		CALL Z, DNLOD
		
		JP MENU
		
		
;TEST KEY PRESSED EITHER RS232 OR PS2
GET_CHAR:	XOR A
		
;GET CHAR FROM RS232
		CALL RS_KEYRD 							;CHAR IN RS232?
;JR Z, GT_TST2
		JP Z, GET_CHAR
		CALL RS_RX 							; GET THAT CHAR
		RET
;GET CHAR FROM PS2 KEYBOARD
;GT_TST2:	CALL PS2ISK 							;A=1 IF WE HAVE A KEY ELSE 0
;		CP 0
;		JR Z, GET_CHAR 							;RECHECK
;		CALL GTKEY 							;GET THE KEY
;		CP 0
;		JP Z GET_CHAR
;		CALL PS2LOK 							;TRANSLATE IT
		
		PUSH AF
		CALL RS_TX
		LD A, 10
		CALL RS_TX
		LD A, 13
		CALL RS_TX
		POP AF
		RET
		
LCDLN1:		LD D, 0
		LD E, 0
		CALL LCD16_SETCURS
		RET
		
LCDLN2:		LD D, 0
		LD E, 0
		CALL LCD16_SETCURS
		RET
		
GONB:		CALL LCDLN2
		LD HL, DSPMES
		CALL LCD16_PRINT
		CALL LCD16_CURSOFF 						;CURSOR OFF
		CALL LCD16_BLINKON 						;BLINK ON
		XOR A
		OUT (INTENB),A							;ENABLE INTERRUPTS ON NB
		JP $A015
		
DSPMES:		DEFM "<< CDESP 2016 >>"
		DB 0
		
TVON:		PUSH HL
		LD HL, TVSTAT
		SET 2, (HL)
		LD HL, 36
		SET 2, (HL)
		POP HL
		JR RESTV
		
		
TVOFF:		PUSH HL
		LD HL, TVSTAT
		RES 2, (HL)
		LD HL, 36
		RES 2, (HL)
		POP HL
		JR RESTV
		
		
TVOFTM:		XOR A 								;TV OFF
		OUT (7), A
		RET
		
RESTV:		PUSH HL
		LD HL, TVSTAT
		LD A, (HL)
		OUT (7), A
		LD A, 5
		OUT (9), A 							; SET DISPLAY ADDRESS
		POP HL
		RET
		
EXEC:		CALL LCD16_CLR
		CALL LCDLN2
		LD HL, SPRGX
		CALL LCD16_PRINT
		CALL LCDLN1
		
		LD A, 5
		CALL SCPRN
		
		LD DE, PRGEX
		LD A, (DE)
		LD L, A
		INC DE
		LD A, (DE)
		LD H, A
		JP (HL)
		
UPLOD:		CALL TVOFTM
		LD HL, DATST
		CALL LCDLN2
		CALL LCD16_PRINT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX 							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
		LD DE, PRGEX 							;SAVE TO PRGEX THE PROG EXEC ADDR=HL
		LD A, L
		LD (DE), A
		INC DE
		LD A, H
		LD (DE), A
		
		CP $80
		JR Z, ROMWR
		JR C, NORWR
		
		ROMWR OUT (124), A 						;SET ROM WRITABLE = '0'
		
		
		
		
NORWR:		PUSH HL
NXB:		CALL RS_RX
		LD (HL), A
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB 							;LOOP ALL BYTES
		
		OUT (125), A 							;SET ROM NON WRITABLE ='1'
		
		LD HL, DATTR
		CALL LCD16_CLR
		CALL LCD16_PRINT
		LD A, 5
		CALL SCPRN
		CALL DELAY
		
		POP HL
;CALL (HL)
		
		CALL RESTV
		
		RET
		
		
		
UPLOD2:		CALL TVOFTM
		LD HL, DATST
		CALL LCDLN2
		CALL LCD16_PRINT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX 							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
		LD DE, PRGEX 							;SAVE TO PRGEX THE PROG EXEC ADDR=HL
		LD A, L
		LD (DE), A
		INC DE
		LD A, H
		LD (DE), A
		
NXB2:		CALL RS_RX
		LD (HL), A
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB2 							;LOOP ALL BYTES
		
		CALL RESTV
		RET
		
DNLOD:		CALL TVOFTM
;LD HL,DATST
;CALL LCDLN2
;CALL LCD16_PRINT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX 							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
NXB3:		LD A, (HL)
		CALL RS_TX 							;SEND BYTE
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB3 							;LOOP ALL BYTES
		
		CALL RESTV
		
		RET
		
PS2AGN:										;TEST PS/2 INPUT
;		IN A, (PS2IN)
		CP 0
		JR Z, PS2AGN
		CP 255
		JR Z, PS2AGN
		CP 1
		JP Z, PS2AGN
;CALL LCDCHR
		CALL RS_TX
		CALL DEL2
;CALL LCD16_CLR
		JR PS2AGN
		
		
RSTST:		NOP 								;GET A KEY FROM RS232
		LD B, 10
TEN:		PUSH BC
		CALL RS_RX
;CALL LCDCHR  	;THE RECEIVED CHAR
		CALL RS_TX 							;SEND BACK THE CHAR
		
		LD A, ' '
;CALL LCDCHR
		LD A, 'R'
;CALL LCDCHR
		
		CALL DEL2
;CALL LCD16_CLR
		POP BC
		DJNZ TEN
		
		XOR A
		RET
		
RSTST2:		NOP 								;TEST RECEIVING AND SENDING 255 BYTES
		LD B, 255
TEN2:		PUSH BC
		CALL RS_RX
;CALL LCDCHR  	;THE RECEIVED CHAR
		CALL RS_TX 							;SEND BACK THE CHAR
;CALL DEL2
		POP BC
		DJNZ TEN2
		XOR A
		RET
		
		
XMTST:		NOP 								;TEST XMIT ALL 8 BITS
		LD B, 255
TEN3:		PUSH BC
		LD A, B
		CALL RS_TX 							;SEND  THE BYTE
		POP BC
		DJNZ TEN3
		XOR A
		RET
		
		
		
TXTSCR:		LD HL, TXTMES 							;SCREEN START
		LD DE, TXTRAM
		LD BC, 21
		LDIR
		
		LD HL, TXTMES
		LD DE, TXTRAM + 64 						;SCREEN START+64 40chars screen +24 excess
		LD BC, 21
		LDIR
		
		XOR A
		RET
		
		
		
SMENU:		DEFM "UI:UP,X:RUN,TYH:RS,S:DISP,NM:NBROM,CV:TV, J:DN"
		DB 0
		
		
STR0:		DEFM "LCD INITIALIZED"
		DB 0
		
STR1:		DEFM "RS232 INIT"
		DB 0
		
STR2:		DEFM "PROGRAM HALTED"
		DB 0
		
STR02:		DEFM "WAITING..."
		DB 0
		
DATTR:		DEFM "PRG TRANSFERED"
		DB 0
		
DATST:		DEFM "RECEIVING..."
		DB 0
		
SPRGX:		DEFM "PRG EXECUTE"
		DB 0
		
STIMG:		DEFM "IMAGE COPY"
		DB 0
		
TXTMES:		DEFM "NEWBRAIN SCREEN READY"
		DB 0
		
		
		
STRMN:		DEFM "U:UP,X:RUN,T:RS,S:DISP,N:NBROM,C:TVON,V:TVOFF"
		DB 10,13,0
		
		
STRBT:		DEFM "NEWBRAIN BOOTED OK"
		DB 10,13,0
		
STRSCR:		DEFM "CLEARING SCREEN."
		DB 10,13,0
		
STR00:		DB 10,13
		DEFM "RS232 INITIALIZED"
		DB 10,13,0
		
STR01:		DB 10,13
		DEFM "WAITING..."
		DB 10,13,0
		DB 0
		
STR06:		DB 10,13
		DEFM "KEY PRESSED"
		DB 10,13,0
		DB 0
		
		
		
		DB 128,0,128,0,255,255
IMAGE:		DB 0
		
		END
