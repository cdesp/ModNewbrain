		NAME MAIN
		
		GLOBAL DEV376
		GLOBAL DEVI2C		
		GLOBAL DEVLCD
		GLOBAL DEVSER
		GLOBAL DEVMMU
		GLOBAL DEVKBI
		GLOBAL DEVSND
		GLOBAL RAMAD
		GLOBAL MENU
		GLOBAL SOUTAS 
		
		DEVLCD EQU $78							
		DEVI2C EQU $70 							;I2C DEVICE
		DEVKBI EQU $48 							;PS/2 Keyb		
		DEVSND EQU $38							;SOUND DEV
		DEV376 EQU $30 							;CH376S DEVICE
		DEVSER EQU $20 							;Serial
		DEVMMU EQU $00 							;MMU
		
		COPSTA EQU 6 							; COP STATUS PORT
		@INTENB EQU $E0							;OUT $E0,0 TO ENABLE INTERRUPTS
		
;PINS EQU DEVLCD 	;LCD INSTRUCTION PORT
;PDAT EQU DEVLCD+01	;LCD DATA SEND PORT
		
		
;PS2OUT EQU DEVPS2
;PS2IN EQU DEVPS2 + 1
		
		@TXTRAM EQU 642 						; 5 SHL 7 +2
		
;ORG $8000-255							;RAM FOR BOOTLOADER VARS NOT NEEDED ON NB
		
		ORG $6D
		ORG $7A 							;$F1 OS VARS UNTIL $FF		
		@SERERR DEFS 1
;@SERER2 DEFS 1
		;@DISPCT DEFS 1
		;----LCD 16x2 via i2c
		@LCDCX DEFS 1 							;DISPLAY X POS (0..F  FOR 1..16)
		@LCDCY DEFS 1 							;DISPLAY Y POS (0 OR 1 FOR LINE 1 AND 2)
		@LCD_DSPCTRL DEFS 1 						;LCD I2C 16X2
		@LCD_DSPMODE DEFS 1 						;LCD I2C 16X2
		@LCD_STSMASK DEFS 1 						;LCD I2C 16X2		
		;----KEYB MODULE
		@KEYCTR DEFS 1 							;IN NB SYSTEM VARS
		@LASTKEY DEFS 1		;LAST KEY PRESSED
		;----MMU Paging				
		@BANKS DEFS 8 							;8 PAGES FOR THE 8 BANKS 0..7
		;----ch376 storage
		@STRG_STAT DEFS 1 						;STORAGE_NEW STAUS BIT 0=0 NOT CONNECTED, 1=CONNECTED, BIT 7 DEVICE EXISTS
		@USBBUF DEFS 30 						;CH376 USB BUFFER=20BYTES
		@STRGBUFF EQU USBBUF 						;USED FOR DIRECTORY AND FILENAME
		;----i2c devices
		@BUFFER EQU USBBUF 						; 20 BYTE BUFFER FOR I2C USAGE		
;CAN BE TRANSFERED TO RAM ONLY FOR BOOTLOADER USE ATL_UTILS
		@PRGEX DEFS 2 							;ONLY FOR BOOTL
		TVSTAT DEFS 1
		@LINESTR DEFS 2 						;ADDRESS OF LINEBUF FOR PRINTING ON STRING
		@LINEPOS DEFS 1
		@MYNUM DEFS 13 							;10CHARS MESSAGE FOR NUMBER AND 3 TERMINATED
		@NUMBUF DEFS 7				
		@B2DINV DEFS 8 							;BINARY NUMBER TO BE CONVERTED
		@B2DBUF DEFS 20 						;ASCCI STRING OF THE NUMBER
		@B2DEND DEFS 1 							;0 FOR TERMINATE THE STRING								
;----I2C DS1307 MODULE
		@TIMMSG EQU B2DBUF						;datetime set get
;----SOUND MODULE 21 bytes
	        ;SONG DATA ADDRESS 0 FOR NO DATA (4) channels
@CHANDATA:      DEFS 2
                DEFS 2
                DEFS 2
                DEFS 2
		;CHANNEL DELAY TO MUTE
@CHANDEL:       DEFS 2
                DEFS 2
                DEFS 2
                DEFS 2
		;CURRENT NOTES IDX FOR CURRENT NOTE PLAYING
@CHANCN:        DEFS 1
                DEFS 1
                DEFS 1
                DEFS 1
@CHANST:        DEFS 1    ;CHANNEL STATUS  BITS 0-3 SET MEANS DISABLED   		
		
		@DIRNM EQU CHANDATA;	;USED BY NB TO KEEP TRACK OF CURRENT DIRECTORY
		
		;TODO:SET BUFFERS TO DEVICE DRIVER MEMORY
		;DIRNM, CHANDATA,CHANDEL,CHANCN, USBBUF, STRGBUFF       		
		
;DISPCT EQU 8+4		;DISPLAY CONTROL
;BIT 0= BLINK CURSOR POS CHAR
;BIT 1= CURSOR ON OFF
;BIT 2=	DISPLAY ON OFF
;BIT 3= 1
		;NOT NEEDED CAUSE WE COME FROM NB ROM AT A000
		;SP IS ALREADY SET AT $0266
		;RAMAD EQU $6000							;used by bootloader		
		;STACKP EQU RAMAD + 100 						;100
		
		;MYNUM EQU $6500
		
		KDATA EQU 6 							;DATA FLAGS SET TO 1 IF UNTRANSMITTED
		BRKBUF EQU $23; 35 
		COPST EQU $3C;
		
		ORG $8000
		
;ADD A,B			;$80 SIGNALS NO ROM HERE FOR NB OS
		CPL 								;ROM IS HERE
		JP START
		JP GETKEY 							;CALL HERE FROM NB ROM TO FIND THE GTNBKEY  $8004
		JP RSTX 							; CALL HERE FROM NB TO FIND SERIAL TRASMIT  $8007
		JP RSRX 							; CALL HERE FROM NB TO FIND SERIAL RECEIVE  $800A
		JP NBSTLCD 							;CALL HERE FROM NB TO FIND THE NBSETLCD $800D
		JP MENU								;$8010
		JP CHKKEY							;CALL HERE FROM NB TO FIND THE CHKKEY $8013 RET NZ FOR KEY AVAIL


		;RS 232 as output device
;FLAGS MUST BE RETAINED NO CARRY FLAG MEANS BACKSPACE IS GO LEFT
@OS_PRINTCHAR:	CALL RS_TX
		RET
		
;HL POINTS TO ZERO TERMINATED MSG
;IX,A DESTROYED
@OS_PRINTTEXT:	LD A, (HL)
		CP 0
		RET Z
		PUSH HL
		CALL OS_PRINTCHAR
		POP HL
		INC HL
		JR OS_PRINTTEXT
		
;PRINTS A ZT MESSAGE FOLLOWING THE CALL
@OS_PRINTMSG:	POP HL
		CALL OS_PRINTTEXT
		INC HL
		PUSH HL 							;CONTINUE AFTER THE MESG
		RET

		;NB screen as ouput device
		@WPTCHAR EQU $3CDF
;PRINTS A CHAR TO SCREEN
;A THE CHAR
@OS_PRCHSCR:	DEFW WPTCHAR
		RET

;PRINTS A MESSAGE TO SCREEN
;HL THE MESSAGE ZT
@OS_PRMESSCR:   LD A,(HL)
		OR A
		RET Z
		DEFW WPTCHAR
		INC HL
		JR OS_PRMESSCR
;SAFE PRINT TO SCREEN NO CHARS BELLOW 31 EXCEPT $0A
@OS_PRMESSCRSFE: LD A,(HL)
		OR A
		RET Z
		CP $0A
		JR Z,PMS_PRN
		CP 31 
		JR C,PMS_SKP
PMS_PRN:	DEFW WPTCHAR
		JR PMS_CNT
PMS_SKP:        PUSH HL
		CALL SOUTAS
		POP HL
PMS_CNT:	INC HL
		JR OS_PRMESSCRSFE

		;Keyboard RS232 or real PS/2 hardware
;PRESERVE A
CHKKEY:		LD B,A
		CALL RS_KEYRD	
		JR NZ, CK_EX							;ZF SET IF NO KEY ON SERIAL
		IN A,(6)
		BIT 3,A								;CHECK IF REAL KBD HAS AVAIL KEY, ZF SET IF NO KEY ON REAL KBD
CK_EX:		LD A,B
		LD D,$A0 							;DISPCOM	
		RES 6,(HL)							;KDATA= BIT 6	
		RET

GETKEY:		PUSH HL
		PUSH DE
		PUSH BC
		;PS/2 KEYBOARD INPUT
		CALL PS2KEYAVAIL 						;ZF=0 IF WE HAVE A KEY ELSE 1
		JR NZ, KEYAVAIL 						;CHECK FOR SERIAL INPUT
		CALL READKBCHAR							;READ KEY FROM PS/2
		JR RGT								;NB TRANSLATION AND EXIT
		;RS232 SERIAL INPUT
KEYAVAIL:	CALL RS_RX 							;GET A CHAR FROM RS232 OR PS2_KEYB
		CP 254								;BREAK KEY
		JR NZ,RGT
		;LD A,1
		;OUT (97),A							;SET KB_STOP BIT ON FPGA TO BE READ BY IN 06
		;LD HL,BRKBUF
		;SET 2,(HL)							;STOP KEY PRESSED
		;XOR A
		LD HL,COPST
		LD (HL),102		;SIMULATE BREAK
		LD A,$19	
		JR KAEXIT
RGT:		CALL GTNBKEY 							;KEY PRESSED TRANSLATE FOR NB
;for trapping
;PUSH AF
;CALL SOUTAS
;LD HL,$026F  ;FLAGS
;LD A,(HL)
;CALL SOUTAS
;POP AF
;
KAEXIT:		POP BC
		POP DE
		POP HL		
		CP 0 								;CHECK IF INVALID KEY
		RET NZ
		RES KDATA (HL) 							; KEY INVALID RESET KDATA TEST BIT
		INC HL 								;GET TO THE LAST VALID KEY
		LD A, (HL)
		DEC HL
		RET
		
RSTX:		CALL RS_TX
		RET
		
RSRX:		CALL RS_RX
		RET
		
; SAVE REGS		
LCD16SETCURS:   PUSH HL
		PUSH BC
		CALL LCD16_SETCURS 						;SET LCD TO LCDCX,LCDCY
		POP BC
		POP HL
		RET

LCD16PRCHR: 	PUSH HL					;OUTPUT CHAR TO LCD
		PUSH BC
		PUSH DE
		CALL LCD16_PRCHR
		POP DE
		POP BC
		POP HL
		RET

;Write to LCD 16x2 via i2c 		
;HL HAS THE STRING TO OUTPUT
;D HAS THE NUMBER OF BYTES
;STRING IS IN REVERSE ORDER
NBSTLCD:	PUSH DE
		LD B, D 							;TOTAL CHARS
		DEC B
		DEC B 								;SKIP 2
		LD DE, 15 							;START FROM THE END
		ADD HL, DE
		XOR A
		LD DE, LCDCX 							;LCD POSITION
		LD (DE), A
		INC DE
		LD (DE), A
;D HAS THE COLUMN E HAS THE ROW
		PUSH DE
		LD D, A
		LD E, A
		CALL LCD16SETCURS 						;SET LCD TO LCDCX,LCDCY
		POP DE
		DEC DE 								;POSITION ON LCDCX
		LD C, 0 							;LCD POSITION COUNT
NBSETLP:	LD A, (HL)
		BIT 7, A 							;CHECK IF CURSOR HERE
		JR Z, NBNXT
		PUSH AF
		LD A, C
		LD (DE), A 							;POSITION CURSOR
		POP AF
		RES 7, A 							;CLEAR CHAR FROM CURSOR INFO
NBNXT:		CALL LCD16PRCHR 						;OUTPUT CHAR TO LCD
		DEC HL
		INC C
		DJNZ NBSETLP 							;LOOP NEXT CHAR
		LD A,(DE)
		LD D, A
		LD E, 0
		CALL LCD16_SETCURS 						;POSITION CURSOR
		POP DE
		RET
		
		
;print a byte in decimal on rs232
SOUTAS:		PUSH AF 							;SERIAL PRINT ASCII IN DECIMAL
		LD H, 0
		LD L, A
		LD DE, MYNUM
		CALL OUTASC
		
		LD A, 10
		LD (DE), A
		INC DE
		LD A, 13
		LD (DE), A
		INC DE
		XOR A
		LD (DE), A
		
		LD HL, MYNUM
		CALL RS_TXT
		POP AF
		RET
		
;VGA		
TVON:		PUSH HL
		LD HL, TVSTAT
		SET 2, (HL)
		LD HL, 36
		SET 2, (HL)
		POP HL
		JR RESTV
		
		
TVOFF:		PUSH HL
		LD HL, TVSTAT
		RES 2, (HL)
		LD HL, 36
		RES 2, (HL)
		POP HL
		JR RESTV
		
		
TVOFTM:		XOR A 								;TV OFF
		OUT (7), A
		RET
		
RESTV:		PUSH HL
		LD HL, TVSTAT
		LD A, (HL)
		OUT (7), A
		LD A, 5
		OUT (9), A 							; SET DISPLAY ADDRESS
		POP HL
		RET

;setup video card memory
FONTNAME1	DEFM "\CHSET4.CHR"
		DB 0
FONTNAME2	DEFM "\CHSET2.CHR"
		DB 0
		
LOADFONTS:	LD B,2			;BANK2
		LD A,8			;VIDEO PAGE FOR FONTS 		
		CALL PUTPGINBANK		
		LD HL,FONTNAME1
		LD BC,3000		;MAX FILE SIZE
		LD DE,$4000		;0000 ON PAGE 8
		CALL STRG_LOADFILE
		JR NC, LFFILOK
		HALT			;STOP EXEC
LFFILOK:	LD HL,FONTNAME2
		LD BC,3000		;MAX FILE SIZE
		LD DE,$5000		;1000h ON PAGE 8
		CALL STRG_LOADFILE		
		JR NC, LFFILOK2
		HALT			;STOP EXEC
LFFILOK2:	LD A,14			;BANK 2 ON NBRAIN RESTORE PAGE 14
		LD B,2
		CALL PUTPGINBANK
		RET	

;newbrain screen data needed by graphics card		
SCRDATA		DB 				   $15,$02,$00,$18,$18,$28,$40,$20
		DB $00,$02,$00,$00,$00,$00,$0A,$00,$00,$00,$FF,$00,$AB,$00,$00,$00
		DB $00,$B1

SETSCRDATA:	LD HL,SCRDATA
		LD DE,$268
		LD BC,26
		LDIR
		LD HL,$5C
		LD (HL),$68		;VIDEO START
		INC HL
		LD (HL),$02
		RET


;HERE starts the bootloader
START:		DI
		CALL STNEWD 							;SET NEWDRIVERS AND DEFSTORE DEVICE

		CALL TVOFF
		
		;INIT DEVICES
		
		;INIT RS232
		LD A, 1 							;1=115200 BPS
		CALL RS_INI 							;RS232 INITIALIZE
		LD HL, STR00
		CALL RS_TXT		
		LD HL, STRSCR
		CALL RS_TXT
		;INIT KEYBOARD
		CALL PS2KBINIT		
		;iNIT I2C
		CALL I2C_INIT
		CALL DS1307_INIT 						;
		CALL DS1307_ADJUST_TEST 					;SET A DEFAULT DATETIME ON DS1307
		CALL LCD16_INIT 						;LCD 16x2 Initialized
		LD HL, STR0
		CALL LCD16_PRINT
		;INIT SOUND SN76489AN
		CALL SND_INIT		
		CALL SND_BEEP
		CALL SND_BEEP2
		CALL SND_BEEP

		
		
		
;LD HL,STR01
;CALL RS_TXT	;OUTPUT WAITING AT RS232
;LD A,3
		
;CALL DELAY
		
ALLOK:		CALL SETSCRDATA
		CALL SCCLS 							;CLEAR SCREEN BUFFER		
		LD HL, STR02
		CALL SCPRN 							;PRINT WAITING AT SCREEN BUFFER
				
		CALL LOADFONTS							;LOAD NEWBRAIN FONTS TO VIDEO RAM
		CALL TVON

		CALL PATCHCMDS							;PATCH CD ROM TO IMPLEMENT OUR OWN COMMANDS
		
MENU:		
		LD HL, STRMN
		CALL RS_TXT 							;OUTPUT MENU COMMANDS AT RS232
		LD HL, STR01
		CALL RS_TXT 							;OUTPUT WAITING AT RS232
		
		CALL LCD16_CLR
		
		LD HL, STR02
		CALL LCD16_PRINT
		
		LD HL, SMENU
		LD A, 2
		CALL SCPRN
		
		CALL GET_KBCHAR							;TAKE A CHAR FROM RS232 OR PS2 KEYB
;CALL RS_RX	; WAIT FOR A CHAR IN RS232
		
		CP 'U' 								;UPLOAD PROGRAM
		CALL Z, UPLOD
		CP 'X'
		JP Z, EXEC
		CP 'S'
		CALL Z, TXTSCR
		CP 'N'
		JP Z, GONB 							;$E090
		CP 'D'
		CALL Z, DNLOD
		
		JP MENU

;TEST KEY PRESSED EITHER RS232 OR PS2
GET_KBCHAR:	XOR A
		
;GET CHAR FROM RS232
		CALL RS_KEYRD 							;CHAR IN RS232?
		JR Z, GT_TST2
		;JR Z, GET_KBCHAR
		CALL RS_RX 							; GET THAT CHAR
		RET
;GET CHAR FROM PS2 KEYBOARD
GT_TST2:	CALL PS2KEYAVAIL 						;ZF=0 IF WE HAVE A KEY ELSE 1
		JR NZ, GET_KBCHAR 						;RECHECK
		CALL READKBCHAR
		OR A
		JP Z,GET_KBCHAR
		
	;	PUSH AF
	;	CALL RS_TX
	;	LD A, 10
	;	CALL RS_TX
	;	LD A, 13
	;	CALL RS_TX
	;	POP AF
		RET
		
LCDLN1:		LD D, 0
		LD E, 0
		CALL LCD16_SETCURS  ; D HAS THE COLUMN E HAS THE ROW
		RET
		
LCDLN2:		LD D, 0
		LD E, 1
		CALL LCD16_SETCURS ; D HAS THE COLUMN E HAS THE ROW
		RET
		
		;SET DEFAULT DIRECTORY TO ROOT
		;START NEWBRAIN ROM
GONB:		LD HL,DIRNM
		LD A,'/'
		LD (HL),A
		INC HL
		LD (HL),0
		INC HL
		LD (HL),0
		CALL LCDLN2
		LD HL, DSPMES
		CALL LCD16_PRINT
		CALL LCD16_CURSOFF 						;CURSOR OFF
		CALL LCD16_BLINKON 						;BLINK ON
		XOR A
		OUT (INTENB),A							;ENABLE INTERRUPTS ON NB
		JP $A015
		
	
		
;execute the uploaded code		
EXEC:		CALL LCD16_CLR
		CALL LCDLN2
		LD HL, SPRGX
		CALL LCD16_PRINT
		CALL LCDLN1
		
		LD A, 5
		CALL SCPRN
		
		LD DE, PRGEX
		LD A, (DE)
		LD L, A
		INC DE
		LD A, (DE)
		LD H, A
		JP (HL)
		
;Upload/receive data from pc via rs232
UPLOD:		LD HL, DATST
		CALL LCDLN2
		CALL LCD16_PRINT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX 							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
		LD DE, PRGEX 							;SAVE TO PRGEX THE PROG EXEC ADDR=HL
		LD A, L
		LD (DE), A
		INC DE
		LD A, H
		LD (DE), A
		
		CP $80
		JR Z, ROMWR
		JR C, NORWR
		
ROMWR:		OUT (124), A 						;SET ROM WRITABLE = '0'					
		
NORWR:		PUSH HL
NXB:		CALL RS_RX
		LD (HL), A
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB 							;LOOP ALL BYTES
		
		OUT (125), A 							;SET ROM NON WRITABLE ='1'
		
		LD HL, DATTR
		CALL LCD16_CLR
		CALL LCD16_PRINT
		LD A, 5
		CALL SCPRN
		CALL DELAY
		
		POP HL
;CALL (HL)				
		RET
		

;download/send data to pc		
;LD HL,DATST
;CALL LCDLN2
;CALL LCD16_PRINT		
DNLOD:		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX 							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
NXB3:		LD A, (HL)
		CALL RS_TX 							;SEND BYTE
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB3 							;LOOP ALL BYTES			
		RET
				
		;for newbrain screen testing
TXTSCR:		LD HL, TXTMES 							;SCREEN START
		LD DE, TXTRAM
		LD BC, 21
		LDIR
		
		LD HL, TXTMES
		LD DE, TXTRAM + 64 						;SCREEN START+64 40chars screen +24 excess
		LD BC, 21
		LDIR
		
		XOR A
		RET
		

DSPMES:		DEFM "<< CDESP 2022 >>"
		DB 0		
		
SMENU:		DEFM "U:UP,X:RUN,S:DISP,N:NBROM,D:DN"
		DB 0	
		
STR0:		DEFM "LCD INITIALIZED"
		DB 0
						
STR02:		DEFM "WAITING..."
		DB 0
		
DATTR:		DEFM "PRG TRANSFERED"
		DB 0
		
DATST:		DEFM "RECEIVING..."
		DB 0
		
SPRGX:		DEFM "PRG EXECUTE"
		DB 0
				
TXTMES:		DEFM "NEWBRAIN SCREEN READY"
		DB 0
				
STRMN:		DEFM "U:UP,X:RUN,S:DISP,N:NBROM,D:DN"
		DB 10,13,0
				
STRBT:		DEFM "NEWBRAIN BOOTED OK"
		DB 10,13,0
		
STRSCR:		DEFM "CLEARING SCREEN."
		DB 10,13,0
		
STR00:		DB 10,13
		DEFM "RS232 INITIALIZED"
		DB 10,13,0
		
STR01:		DB 10,13
		DEFM "WAITING..."
		DB 10,13,0
		DB 0
							
		
		END
